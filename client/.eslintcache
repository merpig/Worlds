[{"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\index.js":"1","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\App.js":"2","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\reportWebVitals.js":"3","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Profile.js":"4","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Signup.js":"5","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Home.js":"6","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Login.js":"7","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\Header\\index.js":"8","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\Footer\\index.js":"9","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\mutations.js":"10","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\subscriptions.js":"11","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\queries.js":"12","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\auth.js":"13","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\WorldList\\index.js":"14","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\WorldList\\CreateWorld.js":"15","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\WorldList\\WorldCard.js":"16","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\Main.js":"17","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\Messages\\index.js":"18","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\World.js":"19","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Users.js":"20"},{"size":517,"mtime":1634218142306,"results":"21","hashOfConfig":"22"},{"size":1767,"mtime":1635129583747,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1634218142308,"results":"24","hashOfConfig":"22"},{"size":8959,"mtime":1635255907144,"results":"25","hashOfConfig":"22"},{"size":2731,"mtime":1634327372536,"results":"26","hashOfConfig":"22"},{"size":1017,"mtime":1635129713500,"results":"27","hashOfConfig":"22"},{"size":2613,"mtime":1634746260151,"results":"28","hashOfConfig":"22"},{"size":1466,"mtime":1634310872604,"results":"29","hashOfConfig":"22"},{"size":876,"mtime":1634218142303,"results":"30","hashOfConfig":"22"},{"size":2447,"mtime":1635628012466,"results":"31","hashOfConfig":"22"},{"size":1003,"mtime":1635131653104,"results":"32","hashOfConfig":"22"},{"size":1074,"mtime":1635118019243,"results":"33","hashOfConfig":"22"},{"size":1084,"mtime":1634218142310,"results":"34","hashOfConfig":"22"},{"size":813,"mtime":1635013906134,"results":"35","hashOfConfig":"22"},{"size":3595,"mtime":1635129672672,"results":"36","hashOfConfig":"22"},{"size":1854,"mtime":1635129678643,"results":"37","hashOfConfig":"22"},{"size":6416,"mtime":1635627979995,"results":"38","hashOfConfig":"22"},{"size":11163,"mtime":1635200790990,"results":"39","hashOfConfig":"22"},{"size":378,"mtime":1635254468154,"results":"40","hashOfConfig":"22"},{"size":605,"mtime":1635262250327,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"49937c",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\index.js",[],["87","88"],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\App.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\reportWebVitals.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Profile.js",["89"],"// Node Modules\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\n// Utilities\r\nimport { ADD_FRIEND, CONFIRM_FRIEND, CANCEL_FRIEND } from '../utils/mutations';\r\n// Auth\r\nimport Auth from '../utils/auth';\r\n\r\nconst AddFriend = ({setShowAddFriend}) => {\r\n  const [username,setUsername] = useState('');\r\n  const [addFriend] = useMutation(ADD_FRIEND);\r\n  const [requestStatus,setRequestStatus] = useState({\r\n    success: false,\r\n    message: ''\r\n  })\r\n\r\n  const handleChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const {data} = await addFriend({\r\n        variables: {username}\r\n      });\r\n      setRequestStatus({\r\n        success: true,\r\n        message: `Added ${data.addFriend.receiving.username}!`\r\n      })\r\n    } catch (e) {\r\n      setRequestStatus({\r\n        success: false,\r\n        message: e.message\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleFormCancel = (event) => {\r\n    event.preventDefault();\r\n    setUsername('');\r\n    setShowAddFriend(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-12 mb-3 mt-3\">\r\n      <div className=\"bg-light p-3\" style={{borderRadius: \".25rem\"}}>\r\n      {requestStatus.message.length?\r\n      <p style={{color: requestStatus.success?'green':'red'}}>{requestStatus.message}</p>\r\n      :[]}\r\n      <form onSubmit={handleFormSubmit}>\r\n        <input\r\n          className=\"form-input\"\r\n          placeholder=\"username\"\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={username}\r\n          onChange={handleChange}\r\n        />\r\n        <button type='submit'>Add User</button>\r\n        <button onClick={handleFormCancel}>Cancel</button>\r\n      </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst RenderAdded = ({friends,user,setFromProfile}) => {\r\n  const [cancelFriend] = useMutation(CANCEL_FRIEND);\r\n  const added = friends.filter(friend=>friend.status===1);\r\n  if(!added.length) return <h4 style={{textAlign:\"center\"}}>No friends added yet.</h4>\r\n\r\n\r\n  const onCancel = async id => {\r\n    try{\r\n      //const {data} =\r\n      await cancelFriend({\r\n        variables: {id}\r\n      });\r\n    } catch(e){\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  const onMessage = (id,friend) => {\r\n    setFromProfile({\r\n      showFriend:false,\r\n      id: id,\r\n      friend : user.username===friend.requesting.username?friend.receiving.username:friend.requesting.username,\r\n      show:true\r\n    })\r\n  }\r\n\r\n  const onProfile = (id) => {\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {added.map(friend=>\r\n      <div key={friend._id} className=\"col-12\">\r\n        <div style={{padding: \"4px\"}}>\r\n          {user.username===friend.requesting.username?\r\n            friend.receiving.username:\r\n            friend.requesting.username}\r\n          <div style={{float:\"right\"}}>\r\n            <Link to={`/users/${friend._id}`}>\r\n              <button>Profile</button>\r\n            </Link>\r\n            <button onClick={()=>onMessage(friend._id,friend)}>Message</button>\r\n            <button onClick={()=>onCancel(friend._id)}>Remove</button>\r\n          </div>\r\n        </div>\r\n        <hr></hr>\r\n      </div>)}  \r\n    </div>\r\n  )\r\n}\r\n\r\nconst RenderPending = ({friends,user}) => {\r\n  const [confirmFriend] = useMutation(CONFIRM_FRIEND);\r\n  const [cancelFriend] = useMutation(CANCEL_FRIEND);\r\n  const pending = friends.filter(friend=>friend.status===0);\r\n  const incoming = pending.filter(friend=>user.username===friend.receiving.username);\r\n  const outgoing = pending.filter(friend=>user.username===friend.requesting.username);\r\n  if(!pending.length) return <h4 style={{textAlign:\"center\"}}>No pending requests.</h4>\r\n\r\n  const onAccept = async id => {\r\n    try {\r\n      //const {data} = \r\n      await confirmFriend({\r\n        variables: {id}\r\n      });\r\n    } catch (e){\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  const onCancel = async id => {\r\n    try{\r\n      //const {data} = \r\n      await cancelFriend({\r\n        variables: {id}\r\n      });\r\n    } catch (e){\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      \r\n      {!incoming.length?\r\n        <div className=\"col-12\" style={{textAlign:\"center\"}}>No incoming requests</div>:\r\n          incoming.map((friend,i)=>\r\n          <div key={friend._id} className=\"col-12\">\r\n            {i===0?<div style={{padding: \"4px\",textAlign:\"center\",width:\"50%\",margin:\"auto\"}}>Incoming Requests:</div>:[]}\r\n            <div style={{padding: \"4px\"}}>\r\n              {friend.requesting.username}\r\n              <div style={{float: \"right\"}}>\r\n                <button onClick={()=>onAccept(friend._id)}>Accept</button>\r\n                <button onClick={()=>onCancel(friend._id)}>Decline</button>\r\n              </div>\r\n            </div>\r\n            <hr></hr>\r\n          </div>)\r\n      }\r\n      \r\n      {!outgoing.length?\r\n        <div className=\"col-12\" style={{textAlign:\"center\",padding:\"4px\"}}>No outgoing requests</div>:\r\n        outgoing.map((friend,i)=>\r\n          <div key={friend._id} className=\"col-12\">\r\n            {i===0?<div style={{padding: \"4px\",textAlign:\"center\"}}><hr></hr>Outgoing Requests:</div>:[]}\r\n            <div style={{padding: \"4px\"}}>\r\n              {friend.receiving.username}\r\n              <div style={{float: \"right\"}}>\r\n                <button onClick={()=>onCancel(friend._id)}>Cancel</button>\r\n              </div>\r\n            </div>\r\n            <hr></hr>\r\n          </div>)\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nconst RenderBlocked = ({friends,user}) => {\r\n  const blocked = friends.filter(friend=>friend.status===2);\r\n  if(!blocked.length) return <h4 style={{textAlign:\"center\"}}>No blocked users.</h4>\r\n  return (\r\n    <div className=\"row\">\r\n      {blocked.map(friend=><div className=\"col-12\">\r\n        {user.username===friend.requesting.username?\r\n          friend.receiving.username:\r\n          friend.requesting.username}\r\n      </div>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst RenderFriendList = ({data,friends,friendsLoading,setFromProfile}) => {\r\n  const [showAddFriend,setShowAddFriend] = useState(false)\r\n  const [status,setStatus] = useState(1);\r\n\r\n  const renderList = [\r\n    <RenderPending friends={friends} user={data.me}/>,\r\n    <RenderAdded friends={friends} user={data.me} setFromProfile={setFromProfile}/>,\r\n    <RenderBlocked friends={friends} user={data.me}/>\r\n  ];\r\n  return (\r\n    <div className=\"col-md-4 col-sm-8\" style={{border:\"2px dotted black\",padding: \"0\"}}>\r\n      <h3 className=\"bg-dark text-light p-3 mb-0\" style={{fontSize:\"1rem\"}}>\r\n        Friends List:\r\n        <button className=\"addFriend\" onClick={()=>setShowAddFriend(!showAddFriend)} style={{fontSize: \"1rem\", float:\"right\"}}><i className=\"fa fa-plus\"></i>Add</button>\r\n      </h3>\r\n      {showAddFriend?<AddFriend setShowAddFriend={setShowAddFriend}/>:[]}\r\n      <div className=\"flex-row\">\r\n        <div className=\"col-4\" style={{textAlign:\"center\",padding:\"0\"}}><button onClick={()=>status===1?{}:setStatus(1)} style={{width:\"100%\",height:\"40px\"}}>Friends</button></div>\r\n        <div className=\"col-4\" style={{textAlign:\"center\",padding:\"0\"}}><button onClick={()=>status===0?{}:setStatus(0)} style={{width:\"100%\",height:\"40px\"}}>Pending</button></div>\r\n        <div className=\"col-4\" style={{textAlign:\"center\",padding:\"0\"}}><button onClick={()=>status===2?{}:setStatus(2)} style={{width:\"100%\",height:\"40px\"}}>Blocked</button></div>\r\n      </div>\r\n      <div style={{minHeight: \"100px\"}}>\r\n\r\n        {friendsLoading||friends===undefined? <h4>Loading...</h4>:renderList[status]}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Profile = ({loading,data,error,friends,friendsLoading,setFromProfile}) => {\r\n  // const { loading, data, error } = useQuery(QUERY_ME);\r\n  if (error) console.log(error);\r\n  \r\n  if (loading) {\r\n    return <h4>Loading...</h4>;\r\n  }\r\n  \r\n  if (!Auth.loggedIn()) {\r\n    return (\r\n      <h4>\r\n        You need to be logged in to see this. Use the navigation links above to\r\n        sign up or log in!\r\n      </h4>\r\n    );\r\n  }\r\n\r\n  const renderCurrentUserInfo = () => {\r\n    if (loading) return null;\r\n    return (\r\n      <ul>\r\n        <li>username: {data.me.username}</li>\r\n        <li>email: {data.me.email}</li>\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  const renderCharacterInfo = () => {\r\n    if (loading) return null;\r\n    if(!data.me.character){\r\n      return (\r\n        <ul>\r\n          {/* <li>username: {user.username}</li> */}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex-row justify-center mb-3\">\r\n        <h2 className=\"col-12 col-md-10 bg-dark text-light p-3 mb-5\">\r\n          Viewing your profile.\r\n        </h2>\r\n        {renderCurrentUserInfo()}\r\n        {renderCharacterInfo()}\r\n        <RenderFriendList data={data} friends={friends} friendsLoading={friendsLoading} setFromProfile={setFromProfile}/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Signup.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Home.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Login.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\Header\\index.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\Footer\\index.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\mutations.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\subscriptions.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\queries.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\auth.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\WorldList\\index.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\WorldList\\CreateWorld.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\WorldList\\WorldCard.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\Main.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\Messages\\index.js",["90","91"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { SEND_MESSAGE } from '../../utils/mutations';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport './index.css'\r\n\r\nconst MessagesButton = ({setShowMessages}) => {\r\n    return(\r\n        <div className=\"message-button circle\" onClick={()=>setShowMessages(true)}>\r\n            💬\r\n        </div>\r\n    )\r\n}\r\n\r\nconst FriendsWithMessage = ({setShowMessages,setShowFriends,friends,data,setFriend,setId}) => {\r\n    const [input,setInput] = useState('')\r\n    const friendsWithMessages = friends.filter(friend=>friend.messages.length);\r\n    //console.log(friendsWithMessages)\r\n    const inputChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n    \r\n    const handleFriendClick = ({friend,id}) => {\r\n        setFriend(friend);\r\n        setId(id);\r\n        setShowFriends(false);\r\n    }\r\n\r\n    const convertTime = epoch => {\r\n        let d = new Date(parseInt(epoch)).toLocaleString().replace(',','').split(' ');\r\n        let today = new Date().toLocaleString().replace(',','').split(' ');;\r\n        if(d[0]===today[0]){\r\n            let [hour,minute] = d[1].split(\":\");\r\n            return `${hour}:${minute} ${d[2]}`\r\n        }\r\n        return d[0]\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"message-header p-3\">\r\n                <div className=\"new-message circle-mid\" onClick={()=>setShowFriends(false)}>✉</div>\r\n                <h3>Messages</h3>\r\n                <div className=\"message-close alt-circle\" onClick={()=>setShowMessages(false)}>✖</div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <form className=\"message-search\">\r\n                        <input className=\"form-input\" onChange={e=>inputChange(e)} value={input} placeholder=\"Search\"></input>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            <div className=\"row friends-with-messages\">\r\n                {friendsWithMessages.length?\r\n                    friendsWithMessages\r\n                        .filter(friend=>{\r\n                            return (friend.receiving.username.includes(input)&&friend.receiving.username!==data.me.username)||\r\n                            (friend.requesting.username.includes(input)&&friend.requesting.username!==data.me.username)}\r\n                        )\r\n                        .map(f=>({\r\n                            username: f.receiving.username===data.me.username?f.requesting.username:f.receiving.username,\r\n                            id: f._id,\r\n                            messages: f.messages,\r\n                            lastSent: f.messages[f.messages.length-1].createdAt\r\n                        }))\r\n                        .sort((a,b)=>b.lastSent-a.lastSent)\r\n                        .map(f=><div key={f.id} className=\"col-12\">\r\n                            <div className=\"message-friend\" onClick={()=>{handleFriendClick({friend:f.username,id:f.id})}}>\r\n                                <h6>{f.username}</h6>\r\n                                <p className=\"mb-0 last-message\">{f.messages[f.messages.length-1].message}</p>\r\n                                <div className=\"last-message-time\">{convertTime(f.messages[f.messages.length-1].createdAt)}</div>\r\n                            </div>\r\n                        </div>):\r\n                    <div className=\"no-messages\">No messages</div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MessagesWithFriend = ({setShowMessages,setShowFriends,friend,setFriend,friends,data,_id,fromProfile,setFriends}) => {\r\n    const [sendMessage] = useMutation(SEND_MESSAGE)\r\n    const [title,setTitle] = useState(friend.length?friend:'New Message');\r\n    const [search,setSearch] = useState('');\r\n    const [message,setMessage] = useState('');\r\n    const [showSearch,setShowSearch] = useState(friend.length?false:true);\r\n    const [friendId,setFriendId] = useState(_id?_id:'');\r\n    const [errorMsg,setErrorMsg] = useState('')\r\n    const [newMsg,setNewMsg]=useState(null);\r\n\r\n    useEffect(()=>{\r\n        if(fromProfile.show){\r\n            setTitle(fromProfile.friend);\r\n            setFriendId(fromProfile.id);\r\n        }\r\n    },[fromProfile])\r\n\r\n    const [filteredFriend] = friends.filter(f=>{\r\n        return f.requesting.username===title||f.receiving.username===title\r\n    })\r\n\r\n    let messages = title==='New Message'?[]:[...filteredFriend?.messages||[]].reverse();\r\n    if(title!=='New Message'&&!filteredFriend) {\r\n        return <>{setShowFriends(true)}</>;\r\n    }\r\n\r\n    const handleFriendClick = ({id,username}) => {\r\n        setTitle(username);\r\n        setFriendId(id);\r\n        setShowSearch(false);\r\n    }\r\n\r\n    const handleSendMessage = async (e) => {\r\n        e.preventDefault();\r\n        if(!message.length) return;\r\n        let index = friends.findIndex(f=>f._id===friendId);\r\n        let updatedFriend = {...friends[index]}\r\n        updatedFriend.messages = [\r\n            ...updatedFriend.messages,\r\n            {\r\n                message,\r\n                sender: {\r\n                    username: data.me.username\r\n                },\r\n                status: 0,\r\n                _id: updatedFriend.messages.length\r\n            }\r\n        ];\r\n        setFriends([\r\n            ...friends.slice(0,index),\r\n            updatedFriend,\r\n            ...friends.slice(index+1)\r\n        ]);\r\n        try {\r\n            await sendMessage({\r\n                variables: {id: friendId,message}\r\n            });\r\n            setMessage('');\r\n        } catch(e){\r\n            console.log(e.message)\r\n            setErrorMsg(e.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"message-header p-3\">\r\n                <div className=\"new-message circle-mid\" onClick={()=>{setShowFriends(true);setFriend('');}}>←</div>\r\n                <h3 className=\"ml-3\">{title}</h3>\r\n                <div className=\"message-close alt-circle\" onClick={()=>setShowMessages(false)}>✖</div>\r\n            </div>\r\n            {showSearch?<div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <form className=\"message-search\" onSubmit={e=>e.preventDefault()}>\r\n                        <input className=\"form-input\" onChange={e=>setSearch(e.target.value)} value={search} placeholder=\"Search friends\"></input>\r\n                    </form>\r\n                </div>\r\n            </div>:[]}\r\n            {showSearch?\r\n            <div className=\"row search-friends-container\">\r\n                {\r\n                    friends\r\n                        .filter(f=>{\r\n                            return ((f.receiving.username.includes(search)&&f.receiving.username!==data.me.username)||\r\n                            (f.requesting.username.includes(search)&&f.requesting.username!==data.me.username))&&f.status===1}\r\n                        )\r\n                        .map(f=>({\r\n                            username: f.receiving.username===data.me.username?f.requesting.username:f.receiving.username,\r\n                            id: f._id\r\n                        }))\r\n                        .map(f=>\r\n                            <div key={f.id} className=\"col-12\">\r\n                                <div className=\"search-friend\" onClick={()=>handleFriendClick(f)}>\r\n                                    {f.username}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>:\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <div className=\"messages p-2\">\r\n                        {\r\n                            messages.map(m=>m.sender.username===title?\r\n                                <div key={m._id} className=\"row mb-1\">\r\n                                    <div className=\"col-8\">\r\n                                        <div className=\"from-friend\">{m.message}</div><div></div>\r\n                                    </div>\r\n                                    <div className=\"col-4\">\r\n                                    </div>\r\n                                </div>:\r\n                                <div key={m._id} className=\"row mb-1\">\r\n                                    <div className=\"col-4\">\r\n                                    </div>\r\n                                    <div className=\"col-8\">\r\n                                        <div className={`from-me status-${m.status}`}>{m.message}</div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        }\r\n                        {errorMsg?errorMsg:\"\"}\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n            {showSearch?[]:\r\n                <form onSubmit={handleSendMessage}>\r\n                    <div className=\"row send-message px-2\">\r\n                        <div className=\"col-10 pr-0\">\r\n                            <input className=\"form-input send-message-input\" placeholder=\"message\" value={message} onChange={e=>setMessage(e.target.value)}>\r\n                            </input>\r\n                        </div>\r\n                        <div className=\"col-2 pl-0 py-2\">\r\n                            <div className=\"message-sent-btn\" onClick={handleSendMessage}>\r\n                                Send\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages = ({friends,data,fromProfile,setFriends}) => {\r\n    const [showMessages,setShowMessages] = useState(false);\r\n    const [showFriends,setShowFriends] = useState(true);\r\n    const [friend,setFriend] = useState('');\r\n    const [id,setId] = useState('');\r\n\r\n    useEffect(()=>{\r\n        if(fromProfile.show){\r\n            setShowMessages(fromProfile.show)\r\n            setShowFriends(fromProfile.showFriend)\r\n            setFriend(fromProfile.friend)\r\n            setId(fromProfile.id)\r\n        }\r\n    },[fromProfile])\r\n\r\n    return (\r\n        showMessages?\r\n            <div className=\"message-container\">\r\n                {(showFriends)?\r\n                    <FriendsWithMessage\r\n                        setShowMessages={setShowMessages}\r\n                        setShowFriends={setShowFriends}\r\n                        friends={friends}\r\n                        data={data}\r\n                        setFriend={setFriend}\r\n                        setId={setId}\r\n                    />:\r\n                    <MessagesWithFriend\r\n                        setShowMessages={setShowMessages}\r\n                        setShowFriends={setShowFriends} \r\n                        friend={friend} \r\n                        setFriend={setFriend}\r\n                        setId={setId}\r\n                        friends={friends}\r\n                        data={data}\r\n                        _id={id}\r\n                        fromProfile={fromProfile}\r\n                        setFriends={setFriends}\r\n                    />}\r\n            </div>:\r\n            <MessagesButton setShowMessages={setShowMessages}/>\r\n    )\r\n}\r\n\r\nexport default Messages;","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\World.js",["92","93"],"import React from 'react';\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst World = () => {\r\n    const { id } = useParams();\r\n\r\n    if(!Auth.loggedIn()) return <Redirect to=\"/login\" />\r\n\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default World;","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Users.js",["94"],"import React from 'react';\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst Users = () => {\r\n    const { id } = useParams();\r\n\r\n    if(!Auth.loggedIn()) return <Redirect to=\"/login\" />\r\n\r\n    console.log(id)\r\n    if( !id ) {\r\n        return (\r\n            <form>\r\n                <input className=\"form-input\" placeholder=\"Search for a user\">\r\n                </input>\r\n            </form>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;",{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":95,"column":9,"nodeType":"101","messageId":"102","endLine":95,"endColumn":18},{"ruleId":"99","severity":1,"message":"103","line":89,"column":12,"nodeType":"101","messageId":"102","endLine":89,"endColumn":18},{"ruleId":"99","severity":1,"message":"104","line":89,"column":19,"nodeType":"101","messageId":"102","endLine":89,"endColumn":28},{"ruleId":"99","severity":1,"message":"105","line":3,"column":10,"nodeType":"101","messageId":"102","endLine":3,"endColumn":18},{"ruleId":"99","severity":1,"message":"106","line":8,"column":13,"nodeType":"101","messageId":"102","endLine":8,"endColumn":15},{"ruleId":"99","severity":1,"message":"105","line":3,"column":10,"nodeType":"101","messageId":"102","endLine":3,"endColumn":18},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'onProfile' is assigned a value but never used.","Identifier","unusedVar","'newMsg' is assigned a value but never used.","'setNewMsg' is assigned a value but never used.","'useQuery' is defined but never used.","'id' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]