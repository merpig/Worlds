[{"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\index.js":"1","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\App.js":"2","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\reportWebVitals.js":"3","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Profile.js":"4","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Signup.js":"5","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Home.js":"6","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Login.js":"7","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\Header\\index.js":"8","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\Footer\\index.js":"9","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\mutations.js":"10","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\subscriptions.js":"11","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\queries.js":"12","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\auth.js":"13","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\WorldList\\index.js":"14","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\WorldList\\CreateWorld.js":"15","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\WorldList\\WorldCard.js":"16","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\Main.js":"17","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\Messages\\index.js":"18","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\World.js":"19","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Users.js":"20"},{"size":517,"mtime":1634218142306,"results":"21","hashOfConfig":"22"},{"size":1773,"mtime":1636415007441,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1634218142308,"results":"24","hashOfConfig":"22"},{"size":10139,"mtime":1636876579644,"results":"25","hashOfConfig":"22"},{"size":2731,"mtime":1634327372536,"results":"26","hashOfConfig":"22"},{"size":1108,"mtime":1636822851839,"results":"27","hashOfConfig":"22"},{"size":2697,"mtime":1636654161939,"results":"28","hashOfConfig":"22"},{"size":1471,"mtime":1636725489561,"results":"29","hashOfConfig":"22"},{"size":882,"mtime":1636859932491,"results":"30","hashOfConfig":"22"},{"size":2878,"mtime":1636654817515,"results":"31","hashOfConfig":"22"},{"size":1276,"mtime":1636834829278,"results":"32","hashOfConfig":"22"},{"size":1211,"mtime":1636834562525,"results":"33","hashOfConfig":"22"},{"size":1084,"mtime":1634218142310,"results":"34","hashOfConfig":"22"},{"size":987,"mtime":1636866997863,"results":"35","hashOfConfig":"22"},{"size":3732,"mtime":1636874144554,"results":"36","hashOfConfig":"22"},{"size":2197,"mtime":1636864028884,"results":"37","hashOfConfig":"22"},{"size":8589,"mtime":1636846805472,"results":"38","hashOfConfig":"22"},{"size":11432,"mtime":1636876940268,"results":"39","hashOfConfig":"22"},{"size":7424,"mtime":1636982385443,"results":"40","hashOfConfig":"22"},{"size":605,"mtime":1635262250327,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"49937c",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\index.js",[],["90","91"],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\App.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\reportWebVitals.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Profile.js",["92","93"],"// Node Modules\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\n// Utilities\r\nimport { ADD_FRIEND, CONFIRM_FRIEND, CANCEL_FRIEND } from '../utils/mutations';\r\n// Auth\r\nimport Auth from '../utils/auth';\r\n// CSS\r\nimport \"./Profile.css\"\r\n\r\nconst AddFriend = ({setShowAddFriend}) => {\r\n  const [username,setUsername] = useState('');\r\n  const [addFriend] = useMutation(ADD_FRIEND);\r\n  const [requestStatus,setRequestStatus] = useState({\r\n    success: false,\r\n    message: ''\r\n  })\r\n\r\n  const handleChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const {data} = await addFriend({\r\n        variables: {username}\r\n      });\r\n      setRequestStatus({\r\n        success: true,\r\n        message: `Added ${data.addFriend.receiving.username}!`\r\n      })\r\n    } catch (e) {\r\n      setRequestStatus({\r\n        success: false,\r\n        message: e.message\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleFormCancel = (event) => {\r\n    event.preventDefault();\r\n    setUsername('');\r\n    setShowAddFriend(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-12 mb-3 mt-3 px-0\">\r\n      <div className=\"add-friend p-3\">\r\n      {requestStatus.message.length?\r\n      <p style={{color: requestStatus.success?'green':'red'}}>{requestStatus.message}</p>\r\n      :[]}\r\n      <form onSubmit={handleFormSubmit}>\r\n        <input\r\n          className=\"form-input\"\r\n          placeholder=\"username\"\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={username}\r\n          onChange={handleChange}\r\n        />\r\n        <button className=\"btn confirm-btn\" type='submit'>Add</button>\r\n        <button className=\"btn cancel-btn\" onClick={handleFormCancel}>Cancel</button>\r\n      </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst RenderAdded = ({friends,user,setFromProfile}) => {\r\n  const [cancelFriend] = useMutation(CANCEL_FRIEND);\r\n  const added = friends.filter(friend=>friend.status===1);\r\n  if(!added.length) return <h4 className=\"text-light text-center\">No friends added yet.</h4>\r\n\r\n\r\n  const onCancel = async id => {\r\n    try{\r\n      //const {data} =\r\n      await cancelFriend({\r\n        variables: {id}\r\n      });\r\n    } catch(e){\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  const onMessage = (id,friend) => {\r\n    setFromProfile({\r\n      showFriend:false,\r\n      id: id,\r\n      friend : user.username===friend.requesting.username?friend.receiving.username:friend.requesting.username,\r\n      show:true\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {added.map(friend=>\r\n      <div key={friend._id} className=\"col-12\">\r\n        <div className=\"p-2 friend-row\">\r\n          {user.username===friend.requesting.username?\r\n            <h6 className=\"text-dark\"><div className={`status-circle ${friend.receiving.status===\"online\"?\"online\":\"offline\"}`}></div>{friend.receiving.username}</h6>:\r\n            <h6 className=\"text-dark\"><div className={`status-circle ${friend.requesting.status===\"online\"?\"online\":\"offline\"}`}></div>{friend.requesting.username}</h6>}\r\n          <div >\r\n            <Link to={`/users/${friend._id}`}>\r\n              <button className=\"btn go-btn\"><i className=\"fa fa-user\"></i></button>\r\n            </Link>\r\n            <button className=\"btn go-btn\" onClick={()=>onMessage(friend._id,friend)}><i className=\"fa fa-envelope\"></i></button>\r\n            <button className=\"btn cancel-btn\" onClick={()=>onCancel(friend._id)}><i className=\"fa fa-trash\"></i></button>\r\n          </div>\r\n        </div>\r\n      </div>)}  \r\n    </div>\r\n  )\r\n}\r\n\r\nconst RenderPending = ({friends,user}) => {\r\n  const [confirmFriend] = useMutation(CONFIRM_FRIEND);\r\n  const [cancelFriend] = useMutation(CANCEL_FRIEND);\r\n  const pending = friends.filter(friend=>friend.status===0);\r\n  const incoming = pending.filter(friend=>user.username===friend.receiving.username);\r\n  const outgoing = pending.filter(friend=>user.username===friend.requesting.username);\r\n  if(!pending.length) return <h4 className=\"text-light text-center\">No pending requests.</h4>\r\n\r\n  const onAccept = async id => {\r\n    try {\r\n      //const {data} = \r\n      await confirmFriend({\r\n        variables: {id}\r\n      });\r\n    } catch (e){\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  const onCancel = async id => {\r\n    try{\r\n      //const {data} = \r\n      await cancelFriend({\r\n        variables: {id}\r\n      });\r\n    } catch (e){\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      \r\n      {!incoming.length?\r\n        <div className=\"col-12 text-light text-center\">No incoming requests</div>:\r\n          incoming.map((friend,i)=>\r\n          <div key={friend._id} className=\"col-12\">\r\n            {i===0?<div className=\"col-12 text-light text-center\">Incoming Requests:</div>:[]}\r\n            <div className=\"p-2 pending-request mt-1\">\r\n              {friend.requesting.username}\r\n              <div style={{float: \"right\"}}>\r\n                <button className=\"btn confirm-btn\" onClick={()=>onAccept(friend._id)}>Add</button>\r\n                <button className=\"btn cancel-btn\" onClick={()=>onCancel(friend._id)}>Decline</button>\r\n              </div>\r\n            </div>\r\n            <hr></hr>\r\n          </div>)\r\n      }\r\n      \r\n      {!outgoing.length?\r\n        <div className=\"col-12 text-light text-center\">No outgoing requests</div>:\r\n        outgoing.map((friend,i)=>\r\n          <div key={friend._id} className=\"col-12\">\r\n            {i===0?<div className=\"col-12 text-light text-center\"><hr></hr>Outgoing Requests:</div>:[]}\r\n            <div className=\"p-2 pending-request mt-1\">\r\n              {friend.receiving.username}\r\n              <button className=\"btn cancel-btn\" onClick={()=>onCancel(friend._id)}>Cancel</button>\r\n            </div>\r\n            <hr></hr>\r\n          </div>)\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nconst RenderBlocked = ({friends,user}) => {\r\n  const blocked = friends.filter(friend=>friend.status===2);\r\n  if(!blocked.length) return <h4 className=\"text-center text-light\">No blocked users.</h4>\r\n  return (\r\n    <div className=\"row\">\r\n      {blocked.map(friend=><div className=\"col-12\">\r\n        {user.username===friend.requesting.username?\r\n          friend.receiving.username:\r\n          friend.requesting.username}\r\n      </div>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst RenderFriendList = ({data,friends,friendsLoading,setFromProfile}) => {\r\n  const [showAddFriend,setShowAddFriend] = useState(false)\r\n  const [status,setStatus] = useState(1);\r\n\r\n  const renderList = [\r\n    <RenderPending friends={friends} user={data.me}/>,\r\n    <RenderAdded friends={friends} user={data.me} setFromProfile={setFromProfile}/>,\r\n    <RenderBlocked friends={friends} user={data.me}/>\r\n  ];\r\n  return (\r\n    <div className=\"col-md-6 friends-list bg-dark pb-3\">\r\n      <h4 className=\"text-light py-2\">\r\n        Friends:\r\n        <button className=\"btn confirm-btn\" onClick={()=>setShowAddFriend(!showAddFriend)} style={{fontSize: \"1rem\", float:\"right\"}}><i className=\"fa fa-plus\"></i></button>\r\n      </h4>\r\n      {showAddFriend?<AddFriend setShowAddFriend={setShowAddFriend}/>:[]}\r\n      <div className=\"flex-row tab-container mb-1\">\r\n        <div className=\"col-4 p-0\">\r\n          <button className={`btn tab-btn text-center p-1 ${status===1?`tab-active`:``}`} onClick={()=>status===1?{}:setStatus(1)} style={{width:\"100%\",height:\"40px\"}}><strong>Friends</strong></button>\r\n        </div>\r\n        <div className=\"col-4 p-0\">\r\n          <button className={`btn tab-btn text-center p-1 ${status===0?`tab-active`:``}`} onClick={()=>status===0?{}:setStatus(0)} style={{width:\"100%\",height:\"40px\"}}>Pending</button>\r\n        </div>\r\n        <div className=\"col-4 p-0\">\r\n          <button className={`btn tab-btn text-center p-1 ${status===2?`tab-active`:``}`} onClick={()=>status===2?{}:setStatus(2)} style={{width:\"100%\",height:\"40px\"}}>Blocked</button>\r\n        </div>\r\n      </div>\r\n      <div style={{minHeight: \"100px\"}}>\r\n\r\n        {friendsLoading||friends===undefined? <h4>Loading...</h4>:renderList[status]}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Profile = ({loading,data,error,friends,friendsLoading,setFromProfile}) => {\r\n  // const { loading, data, error } = useQuery(QUERY_ME);\r\n  if (error) console.log(error);\r\n  \r\n  if (loading) {\r\n    return <h4>Loading...</h4>;\r\n  }\r\n  \r\n  if (!Auth.loggedIn()) {\r\n    return (\r\n      <h4 className=\"bg-dark text-light\">\r\n        You need to be logged in to see this. Use the navigation links above to\r\n        sign up or log in!\r\n      </h4>\r\n    );\r\n  }\r\n\r\n  const renderCurrentUserInfo = () => {\r\n    if (loading) return null;\r\n    return (\r\n      <div className=\"col-12 bg-dark text-light profile-info mb-3\">\r\n        <div className=\"row my-2\">\r\n          <div className=\"col-sm-6\">\r\n            <img alt=\"character image\" height=\"400px\"></img>\r\n          </div>\r\n          <div className=\"col-sm-6\">\r\n            <h3 className=\"text-center\">User Info</h3>\r\n            <ul className=\"list-group\">\r\n              <li className=\"list-group-item\">username: {data.me.username}</li>\r\n              <li className=\"list-group-item\">email: {data.me.email}</li>\r\n              <li className=\"list-group-item last\">worlds: {data.me.worlds.length}</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const renderCharacterInfo = () => {\r\n    if (loading) return null;\r\n    if(!data.me.character){\r\n      return (\r\n        <ul>\r\n          {/* <li>username: {user.username}</li> */}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex-row justify-center mb-3\">\r\n        <h2 className=\"col-12 bg-dark text-center text-light p-3 mb-5 profile-header\">\r\n          Viewing your profile.\r\n        </h2>\r\n        {renderCurrentUserInfo()}\r\n        {/* {renderCharacterInfo()} */}\r\n        <div className=\"col-md-6\">\r\n\r\n        </div>\r\n        <RenderFriendList data={data} friends={friends} friendsLoading={friendsLoading} setFromProfile={setFromProfile}/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Signup.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Home.js",["94"],"// Node Modules\r\nimport React, { useEffect } from 'react';\r\n// Utilities\r\nimport Auth from '../utils/auth';\r\n// Components\r\nimport WorldList from '../components/WorldList';\r\n\r\nconst Home = ({worlds,setWorlds,loading,data,setShowNavFooter}) => {\r\n\r\n  useEffect(()=>{\r\n    setShowNavFooter(true);\r\n  },[])\r\n  const renderUserList = () => {\r\n    if (loading) {\r\n      return <h2>Loading...</h2>\r\n    } \r\n    else if(!data){\r\n      return;\r\n    }\r\n    else {\r\n      return <WorldList worlds={worlds} setWorlds={setWorlds} title=\"List of Worlds\" />\r\n    } \r\n  }\r\n\r\n  const renderUsername = () => {\r\n    if (!Auth.loggedIn()) return 'Please login or signup'; \r\n    return Auth.getProfile().data.username;\r\n  }\r\n\r\n  return ( \r\n    <main>\r\n      <div className=\"flex-row justify-center\">\r\n        <div\r\n          className=\"col-12 col-md-10 mb-3 p-3\"\r\n          style={{ border: '1px dotted #1a1a1a' }}\r\n        >\r\n          {renderUsername()}\r\n        </div>\r\n        <div className=\"col-12 col-md-8 mb-3\">\r\n          {renderUserList()}\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Login.js",["95"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport { LOGIN_USER } from '../utils/mutations';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst Login = ({setShowNavFooter}) => {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [login, { error, data }] = useMutation(LOGIN_USER);\r\n  \r\n  useEffect(()=>{\r\n    setShowNavFooter(true);\r\n  },[]);\r\n  // update state based on form input changes\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // submit form\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Attempting to login\");\r\n    try {\r\n      const { data } = await login({\r\n        variables: { ...formState },\r\n      });\r\n\r\n      Auth.login(data.login.token);\r\n    } catch (e) {\r\n      console.error(error);\r\n    }\r\n\r\n    // clear form values\r\n    setFormState({\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main className=\"flex-row justify-center mb-4\">\r\n      <div className=\"col-12 col-lg-10\">\r\n        <div className=\"card\">\r\n          <h4 className=\"card-header bg-dark text-light p-2\">Login</h4>\r\n          <div className=\"card-body\">\r\n            {data ? (\r\n              <p>\r\n                Success! You may now head{' '}\r\n                <Link to=\"/\">back to the homepage.</Link>\r\n              </p>\r\n            ) : (\r\n              <form onSubmit={handleFormSubmit}>\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"Your email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  value={formState.email}\r\n                  onChange={handleChange}\r\n                />\r\n                <input\r\n                  className=\"form-input\"\r\n                  placeholder=\"******\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  value={formState.password}\r\n                  onChange={handleChange}\r\n                />\r\n                <button\r\n                  className=\"btn btn-block btn-primary\"\r\n                  style={{ cursor: 'pointer' }}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            )}\r\n\r\n            {error && (\r\n              <div className=\"my-3 p-3 bg-danger text-white\">\r\n                {error.message}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\Header\\index.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\Footer\\index.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\mutations.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\subscriptions.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\queries.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\utils\\auth.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\WorldList\\index.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\WorldList\\CreateWorld.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\WorldList\\WorldCard.js",[],"C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\Main.js",["96","97"],"import React, { useState, useEffect } from 'react';\r\nimport { useQuery, useMutation, useSubscription } from '@apollo/client';\r\nimport { BrowserRouter as Router, Route, Redirect, useParams } from 'react-router-dom';\r\nimport { Beforeunload } from 'react-beforeunload';\r\n\r\nimport Home from './pages/Home';\r\nimport Signup from './pages/Signup';\r\nimport Login from './pages/Login';\r\nimport Profile from './pages/Profile';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Messages from './components/Messages';\r\nimport World from './pages/World';\r\nimport Users from './pages/Users';\r\n\r\nimport Auth from './utils/auth';\r\n\r\nimport { QUERY_ME, QUERY_FRIENDS } from './utils/queries';\r\nimport { LOGOUT_USER } from './utils/mutations';\r\nimport { \r\n  FRIEND_ADDED, \r\n  FRIEND_CANCELED, \r\n  FRIEND_UPDATED, \r\n  MESSAGE_SENT,\r\n  LOGGED_IN,\r\n  LOGGED_OUT\r\n} from './utils/subscriptions';\r\n\r\nconst Main = () => {\r\n    const { loading, data, error } = useQuery(QUERY_ME);\r\n    const { loading: friendsLoading, data: friendsData} = useQuery(QUERY_FRIENDS);\r\n\r\n    const [logout] = useMutation(LOGOUT_USER)\r\n\r\n    const { loading: newFriendDataLoading, data: newFriendData} = useSubscription(FRIEND_ADDED);\r\n    const { loading: friendUpdatedLoading, data: friendUpdatedData} = useSubscription(FRIEND_UPDATED);\r\n    const { loading: friendCanceledLoading, data: friendCanceledData} = useSubscription(FRIEND_CANCELED);\r\n    const { loading: messageLoading, data: messageData} = useSubscription(MESSAGE_SENT);\r\n    const { loading: loggedInLoading, data: loggedInData, error: loggedInError} = useSubscription(LOGGED_IN);\r\n    const { loading: loggedOutLoading, data: loggedOutData, error: loggedOutError} = useSubscription(LOGGED_OUT);\r\n\r\n\r\n    const [friends,setFriends]=useState([]);\r\n    const [worlds,setWorlds]=useState([]);\r\n    const [messageFromProfile,setMessageFromProfile]=useState({});\r\n    const [showNavFooter,setShowNavFooter]=useState(true);\r\n\r\n    useEffect(()=>{\r\n      Auth.loggedIn()\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n      //console.log(loggedInLoading,loggedInData,loggedInError)\r\n      if(!loggedInLoading&&loggedInData){\r\n        const id = loggedInData.loggedIn._id;\r\n        setFriends(friends=>{\r\n          const index = friends.findIndex(e=>e.receiving._id===id||e.requesting._id===id);\r\n          let friendToUpdate = {...friends[index]};\r\n          let receiving = {...friendToUpdate.receiving}\r\n          let requesting = {...friendToUpdate.requesting}\r\n          receiving._id===id?\r\n            receiving.status=\"online\":\r\n            requesting.status=\"online\";\r\n          return [\r\n            ...friends.slice(0,index),\r\n            {...friendToUpdate,receiving,requesting},\r\n            ...friends.slice(index+1)\r\n            ]\r\n        })\r\n      }\r\n    },[loggedInLoading,loggedInData,loggedInError])\r\n\r\n    useEffect(()=>{\r\n      //console.log(loggedOutLoading,loggedOutData,loggedOutError)\r\n      if(!loggedOutLoading&&loggedOutData){\r\n        const id = loggedOutData.loggedOut._id;\r\n        setFriends(friends=>{\r\n          const index = friends.findIndex(e=>e.receiving._id===id||e.requesting._id===id);\r\n          let friendToUpdate = {...friends[index]};\r\n          let receiving = {...friendToUpdate.receiving}\r\n          let requesting = {...friendToUpdate.requesting}\r\n          receiving._id===id?\r\n            receiving.status=\"offline\":\r\n            requesting.status=\"offline\";\r\n          return [\r\n            ...friends.slice(0,index),\r\n            {...friendToUpdate,receiving,requesting},\r\n            ...friends.slice(index+1)\r\n            ]\r\n        })\r\n      }\r\n    },[loggedOutLoading,loggedOutData,loggedOutError])\r\n\r\n    useEffect(()=>{\r\n        if(!loading&&data)\r\n            setWorlds([...data.me.worlds]);\r\n    },[loading,data]);\r\n\r\n    useEffect(()=>{\r\n        if(!friendsLoading&&friendsData)\r\n            setFriends([...friendsData.friends]);\r\n    },[friendsLoading,friendsData]);\r\n\r\n    useEffect(()=>{\r\n        if(!messageLoading&&messageData){\r\n            setFriends(friends=>{\r\n                let index = friends.findIndex(e=>e._id===messageData.messageSent._id);\r\n                let updatedFriend = {...friends[index]};\r\n                let messageIndex = updatedFriend.messages.length;\r\n                for(let i = updatedFriend.messages.length-1; i>=0;i--){\r\n                  if(updatedFriend.messages[i].message === messageData.messageSent.message.message &&\r\n                    updatedFriend.messages[i].sender.username===messageData.messageSent.message.sender.username&&\r\n                    updatedFriend.messages[i].status===0){\r\n                      messageIndex = i;\r\n                    }\r\n                }\r\n                updatedFriend.messages= [\r\n                  ...updatedFriend.messages.slice(0,messageIndex),\r\n                  messageData.messageSent.message,\r\n                  ...updatedFriend.messages.slice(messageIndex+1)\r\n                ];\r\n                return [\r\n                ...friends.slice(0,index),\r\n                updatedFriend,\r\n                ...friends.slice(index+1)\r\n                ]\r\n            });\r\n        }\r\n    },[messageLoading,messageData]);\r\n\r\n    useEffect(()=>{\r\n        if(!newFriendDataLoading&&newFriendData){\r\n        setFriends(friends=>[...friends,newFriendData.friendAdded]);\r\n        } \r\n    },[newFriendData, newFriendDataLoading]);\r\n\r\n    useEffect(()=>{ \r\n        if(!friendUpdatedLoading&&friendUpdatedData){\r\n        setFriends(friends=>{\r\n            let {friendUpdated} = friendUpdatedData;\r\n            let index = friends.findIndex(friend=>\r\n            friend.requesting.username===friendUpdated.requesting.username&&\r\n            friend.receiving.username===friendUpdated.receiving.username\r\n            )\r\n            let updatedFriend = {...friends[index]};\r\n            updatedFriend.status = friendUpdated.status\r\n            return [\r\n            ...friends.slice(0,index),\r\n            updatedFriend,\r\n            ...friends.slice(index+1)\r\n            ]\r\n        });\r\n        }\r\n    },[friendUpdatedData, friendUpdatedLoading]);\r\n\r\n    useEffect(()=>{ \r\n        if(!friendCanceledLoading&&friendCanceledData){\r\n        setFriends(friends=>{\r\n            let {friendCanceled} = friendCanceledData;\r\n            let index = friends.findIndex(friend=>\r\n            friend.requesting.username===friendCanceled.requesting.username&&\r\n            friend.receiving.username===friendCanceled.receiving.username\r\n            )\r\n            return [\r\n            ...friends.slice(0,index),\r\n            ...friends.slice(index+1)\r\n            ]\r\n        });\r\n        }\r\n    },[friendCanceledData, friendCanceledLoading]);\r\n\r\n    const beforeUnload = () => {\r\n      //logout();\r\n    }\r\n\r\n    return(<Beforeunload onBeforeunload={beforeUnload}>\r\n      <Router>\r\n        <div className=\"flex-column justify-flex-start min-100-vh\">\r\n          {showNavFooter?<Header />:[]}\r\n          <div className=\"container\">\r\n            <Route exact path=\"/\">\r\n              <Home \r\n                loading={loading}\r\n                data={data}\r\n                worlds={worlds}\r\n                setWorlds={setWorlds}\r\n                setShowNavFooter={setShowNavFooter}\r\n              />\r\n            </Route>\r\n            <Route exact path=\"/login\">\r\n              <Login setShowNavFooter={setShowNavFooter}/>\r\n            </Route>\r\n            <Route exact path=\"/signup\">\r\n              <Signup setShowNavFooter={setShowNavFooter}/>\r\n            </Route>\r\n            <Route exact path=\"/me\">\r\n              <Profile \r\n                loading={loading} \r\n                data={data} \r\n                error={error} \r\n                friends={friends} \r\n                friendsLoading={friendsLoading}\r\n                setFromProfile={setMessageFromProfile}\r\n                setShowNavFooter={setShowNavFooter}\r\n                />\r\n            </Route>\r\n            <Route exact path=\"/users/:id\">\r\n              <Users />\r\n            </Route>\r\n            <Route exact path=\"/users\">\r\n              <Users />\r\n            </Route>\r\n            <Route exact path=\"/world/:id\">\r\n              {<World setShowNavFooter={setShowNavFooter}/>}\r\n            </Route>\r\n            <Route exact path=\"/world\">\r\n              <Redirect to=\"/\"/>\r\n            </Route>\r\n          </div>\r\n          {Auth.loggedIn()?<Messages friends={friends} data={data} fromProfile={messageFromProfile} setFriends={setFriends}/>:[]}\r\n          {showNavFooter?<Footer />:[]}\r\n        </div>\r\n    </Router></Beforeunload>);\r\n}\r\n\r\nexport default Main;","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\components\\Messages\\index.js",["98","99"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { SEND_MESSAGE } from '../../utils/mutations';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport './index.css'\r\n\r\nconst MessagesButton = ({setShowMessages}) => {\r\n    return(\r\n        <div className=\"message-button circle\" onClick={()=>setShowMessages(true)}>\r\n            💬\r\n        </div>\r\n    )\r\n}\r\n\r\nconst FriendsWithMessage = ({setShowMessages,setShowFriends,friends,data,setFriend,setId}) => {\r\n    const [input,setInput] = useState('')\r\n    const friendsWithMessages = friends.filter(friend=>friend.messages.length);\r\n    //console.log(friendsWithMessages)\r\n    const inputChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n    \r\n    const handleFriendClick = ({friend,id}) => {\r\n        setFriend(friend);\r\n        setId(id);\r\n        setShowFriends(false);\r\n    }\r\n\r\n    const convertTime = epoch => {\r\n        let d = new Date(parseInt(epoch)).toLocaleString().replace(',','').split(' ');\r\n        let today = new Date().toLocaleString().replace(',','').split(' ');;\r\n        if(d[0]===today[0]){\r\n            let [hour,minute] = d[1].split(\":\");\r\n            return `${hour}:${minute} ${d[2]}`\r\n        }\r\n        return d[0]\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"message-header p-3\">\r\n                <div className=\"new-message circle-mid\" onClick={()=>setShowFriends(false)}>✉</div>\r\n                <h3>Messages</h3>\r\n                <div className=\"message-close alt-circle\" onClick={()=>setShowMessages(false)}>✖</div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <form className=\"message-search\">\r\n                        <input className=\"form-input\" onChange={e=>inputChange(e)} value={input} placeholder=\"Search\"></input>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            <div className=\"row friends-with-messages\">\r\n                {friendsWithMessages.length?\r\n                    friendsWithMessages\r\n                        .filter(friend=>{\r\n                            return (friend.receiving.username.includes(input)&&friend.receiving.username!==data.me.username)||\r\n                            (friend.requesting.username.includes(input)&&friend.requesting.username!==data.me.username)}\r\n                        )\r\n                        .map(f=>({\r\n                            username: f.receiving.username===data.me.username?f.requesting.username:f.receiving.username,\r\n                            status:f.receiving.username===data.me.username?f.requesting.status:f.receiving.status,\r\n                            id: f._id,\r\n                            messages: f.messages,\r\n                            lastSent: f.messages[f.messages.length-1].createdAt\r\n                        }))\r\n                        .sort((a,b)=>b.lastSent-a.lastSent)\r\n                        .map(f=><div key={f.id} className=\"col-12\">\r\n                            <div className=\"message-friend\" onClick={()=>{handleFriendClick({friend:f.username,id:f.id})}}>\r\n                                <h6><div className={`status-circle ${f.status===\"online\"?\"online\":\"offline\"}`}></div>{f.username}</h6>\r\n                                <p className=\"mb-0 last-message\">{f.messages[f.messages.length-1].message}</p>\r\n                                <div className=\"last-message-time\">{convertTime(f.messages[f.messages.length-1].createdAt)}\r\n                                    \r\n                                </div>\r\n                            </div>\r\n                        </div>):\r\n                    <div className=\"no-messages\">No messages</div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MessagesWithFriend = ({setShowMessages,setShowFriends,friend,setFriend,friends,data,_id,fromProfile,setFriends}) => {\r\n    const [sendMessage] = useMutation(SEND_MESSAGE)\r\n    const [title,setTitle] = useState(friend.length?friend:'New Message');\r\n    const [search,setSearch] = useState('');\r\n    const [message,setMessage] = useState('');\r\n    const [showSearch,setShowSearch] = useState(friend.length?false:true);\r\n    const [friendId,setFriendId] = useState(_id?_id:'');\r\n    const [errorMsg,setErrorMsg] = useState('')\r\n    const [newMsg,setNewMsg]=useState(null);\r\n\r\n    useEffect(()=>{\r\n        if(fromProfile.show){\r\n            setTitle(fromProfile.friend);\r\n            setFriendId(fromProfile.id);\r\n        }\r\n    },[fromProfile])\r\n\r\n    const [filteredFriend] = friends.filter(f=>{\r\n        return f.requesting.username===title||f.receiving.username===title\r\n    })\r\n\r\n    let messages = title==='New Message'?[]:[...filteredFriend?.messages||[]].reverse();\r\n    if(title!=='New Message'&&!filteredFriend) {\r\n        return <>{setShowFriends(true)}</>;\r\n    }\r\n\r\n    const handleFriendClick = ({id,username}) => {\r\n        setTitle(username);\r\n        setFriendId(id);\r\n        setShowSearch(false);\r\n    }\r\n\r\n    const handleSendMessage = async (e) => {\r\n        e.preventDefault();\r\n        if(!message.length) return;\r\n        let index = friends.findIndex(f=>f._id===friendId);\r\n        let updatedFriend = {...friends[index]}\r\n        updatedFriend.messages = [\r\n            ...updatedFriend.messages,\r\n            {\r\n                message,\r\n                sender: {\r\n                    username: data.me.username\r\n                },\r\n                status: 0,\r\n                _id: updatedFriend.messages.length\r\n            }\r\n        ];\r\n        setFriends([\r\n            ...friends.slice(0,index),\r\n            updatedFriend,\r\n            ...friends.slice(index+1)\r\n        ]);\r\n        try {\r\n            await sendMessage({\r\n                variables: {id: friendId,message}\r\n            });\r\n            setMessage('');\r\n        } catch(e){\r\n            console.log(e.message)\r\n            setErrorMsg(e.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"message-header p-3\">\r\n                <div className=\"new-message circle-mid\" onClick={()=>{setShowFriends(true);setFriend('');}}>←</div>\r\n                <h3 className=\"ml-3\">{title}</h3>\r\n                <div className=\"message-close alt-circle\" onClick={()=>setShowMessages(false)}>✖</div>\r\n            </div>\r\n            {showSearch?<div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <form className=\"message-search\" onSubmit={e=>e.preventDefault()}>\r\n                        <input className=\"form-input\" onChange={e=>setSearch(e.target.value)} value={search} placeholder=\"Search friends\"></input>\r\n                    </form>\r\n                </div>\r\n            </div>:[]}\r\n            {showSearch?\r\n            <div className=\"row search-friends-container\">\r\n                {\r\n                    friends\r\n                        .filter(f=>{\r\n                            return ((f.receiving.username.includes(search)&&f.receiving.username!==data.me.username)||\r\n                            (f.requesting.username.includes(search)&&f.requesting.username!==data.me.username))&&f.status===1}\r\n                        )\r\n                        .map(f=>({\r\n                            username: f.receiving.username===data.me.username?f.requesting.username:f.receiving.username,\r\n                            id: f._id\r\n                        }))\r\n                        .map(f=>\r\n                            <div key={f.id} className=\"col-12\">\r\n                                <div className=\"search-friend\" onClick={()=>handleFriendClick(f)}>\r\n                                    {f.username}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>:\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <div className=\"messages p-2\">\r\n                        {\r\n                            messages.map(m=>m.sender.username===title?\r\n                                <div key={m._id} className=\"row mb-1\">\r\n                                    <div className=\"col-8\">\r\n                                        <div className=\"from-friend\">{m.message}</div><div></div>\r\n                                    </div>\r\n                                    <div className=\"col-4\">\r\n                                    </div>\r\n                                </div>:\r\n                                <div key={m._id} className=\"row mb-1\">\r\n                                    <div className=\"col-4\">\r\n                                    </div>\r\n                                    <div className=\"col-8\">\r\n                                        <div className={`from-me status-${m.status}`}>{m.message}</div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        }\r\n                        {errorMsg?errorMsg:\"\"}\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n            {showSearch?[]:\r\n                <form onSubmit={handleSendMessage}>\r\n                    <div className=\"row send-message px-2\">\r\n                        <div className=\"col-10 pr-0\">\r\n                            <input className=\"form-input send-message-input\" placeholder=\"message\" value={message} onChange={e=>setMessage(e.target.value)}>\r\n                            </input>\r\n                        </div>\r\n                        <div className=\"col-2 pl-0 py-2\">\r\n                            <div className=\"message-sent-btn\" onClick={handleSendMessage}>\r\n                                Send\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages = ({friends,data,fromProfile,setFriends}) => {\r\n    const [showMessages,setShowMessages] = useState(false);\r\n    const [showFriends,setShowFriends] = useState(true);\r\n    const [friend,setFriend] = useState('');\r\n    const [id,setId] = useState('');\r\n\r\n    useEffect(()=>{\r\n        if(fromProfile.show){\r\n            setShowMessages(fromProfile.show)\r\n            setShowFriends(fromProfile.showFriend)\r\n            setFriend(fromProfile.friend)\r\n            setId(fromProfile.id)\r\n        }\r\n    },[fromProfile])\r\n\r\n    return (\r\n        showMessages?\r\n            <div className=\"message-container\">\r\n                {(showFriends)?\r\n                    <FriendsWithMessage\r\n                        setShowMessages={setShowMessages}\r\n                        setShowFriends={setShowFriends}\r\n                        friends={friends}\r\n                        data={data}\r\n                        setFriend={setFriend}\r\n                        setId={setId}\r\n                    />:\r\n                    <MessagesWithFriend\r\n                        setShowMessages={setShowMessages}\r\n                        setShowFriends={setShowFriends} \r\n                        friend={friend} \r\n                        setFriend={setFriend}\r\n                        setId={setId}\r\n                        friends={friends}\r\n                        data={data}\r\n                        _id={id}\r\n                        fromProfile={fromProfile}\r\n                        setFriends={setFriends}\r\n                    />}\r\n            </div>:\r\n            <MessagesButton setShowMessages={setShowMessages}/>\r\n    )\r\n}\r\n\r\nexport default Messages;","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\World.js",["100","101","102"],"import React, { useEffect } from 'react';\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ENTER_WORLD } from '../utils/mutations';\r\nimport * as THREE from \"three\";\r\nimport Auth from '../utils/auth';\r\nimport \"./World.css\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nconst CameraControls = (camera, renderer,scene) => {\r\n    let controls = new OrbitControls( camera , renderer.domElement);\r\n    controls.enabled = true;\r\n    controls.enableDamping = true;   //damping \r\n    controls.dampingFactor = 0.15;   //damping inertia\r\n    controls.enableZoom = true;      //Zooming\r\n    controls.autoRotate = false;     //Enable auto rotation\r\n    controls.minDistance = (2+5);\r\n    controls.maxDistance = (2+5)+20;\r\n    controls.enablePan = false;\r\n    controls.keys = {\r\n        LEFT: null, //left arrow\r\n        UP: null, // up arrow\r\n        RIGHT: null, // right arrow\r\n        BOTTOM: null // down arrow\r\n    };\r\n    controls.addEventListener(\"change\", (e) => {\r\n        if (renderer) renderer.render(scene, camera);\r\n    });\r\n    return controls;\r\n}\r\n\r\nconst RenderWorld = ({id}) => {\r\n    \r\n    const [enterWorld, {data, loading, error}] = useMutation(ENTER_WORLD);\r\n    // const [exitWorld, {data, loading, error}] = useMutation(EXIT_WORLD);\r\n    const world = data?.enterWorld || {};\r\n\r\n    // Set up the scene\r\n    let scene = new THREE.Scene();\r\n    let camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, .1, 1000 );\r\n    let renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n    let raycaster = new THREE.Raycaster();\r\n    let mouse = new THREE.Vector2();\r\n    //let controls = CameraControls(camera, renderer,scene);\r\n\r\n    renderer.setClearColor(new THREE.Color(\"black\"),1);\r\n    renderer.domElement.className = \"canvas\";\r\n    renderer.setSize( window.innerWidth, window.innerHeight);\r\n\r\n    camera.position.z = 5;\r\n    camera.position.y = 5;\r\n    camera.position.x = 5;\r\n    camera.lookAt(new THREE.Vector3(5,5,0))\r\n    let xRotation = .5;\r\n    camera.translateZ(-5);\r\n    //camera.translateY(5);\r\n    camera.rotateX(.5);\r\n    camera.translateZ(5);\r\n    //camera.translateY(-5);\r\n\r\n\r\n\r\n\r\n    renderer.render( scene, camera );\r\n\r\n    window.addEventListener(\"resize\", \r\n        () => {\r\n            let tanFOV = Math.tan( ( ( Math.PI / 180 ) * camera.fov / 2 ) );\r\n            let windowHeight = window.innerHeight;\r\n\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            \r\n            // adjust the FOV\r\n            camera.fov = ( 360 / Math.PI ) * Math.atan( tanFOV * ( window.innerHeight / windowHeight ) );\r\n            \r\n            camera.updateProjectionMatrix();\r\n            camera.lookAt( scene.position );\r\n\r\n            renderer.setSize( window.innerWidth, window.innerHeight );\r\n            renderer.render( scene, camera );\r\n        }, false\r\n    );\r\n\r\n    window.addEventListener(\"keydown\",e=>{\r\n        switch(e.key){\r\n            case 'ArrowRight':\r\n                camera.translateZ(-5);\r\n                camera.rotateX(-xRotation)\r\n                camera.rotateZ(.1);\r\n                camera.rotateX(xRotation)\r\n                camera.translateZ(5);\r\n                break;\r\n            case 'ArrowLeft':\r\n                camera.translateZ(-5);\r\n                camera.rotateX(-xRotation)\r\n                camera.rotateZ(-.1);\r\n                camera.rotateX(xRotation)\r\n                camera.translateZ(5);\r\n                break;\r\n            case 'ArrowDown':\r\n                if(xRotation<1) xRotation+=.1\r\n                else break;\r\n                camera.translateZ(-5);\r\n                camera.rotateX(.1);\r\n                camera.translateZ(5);\r\n                break;\r\n            case 'ArrowUp':\r\n                if(xRotation>.2) xRotation-=.1\r\n                else break;\r\n                camera.translateZ(-5);\r\n                camera.rotateX(-.1);\r\n                camera.translateZ(5);\r\n                break;\r\n            default:\r\n        }\r\n    });\r\n\r\n    function onMouseDown(e) {\r\n        // update mouse position\r\n        mouse.x = (e.clientX / window.innerWidth) * 2 - 1;\r\n        mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\r\n        \r\n        // Set the raycaster to check for intersected objects\r\n        raycaster.setFromCamera( mouse, camera );\r\n\r\n        const intersects = raycaster.intersectObjects( scene.children );\r\n\r\n        console.log(intersects);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log(id)\r\n        try{\r\n            enterWorld({\r\n                variables: {id}\r\n            });\r\n            function removeElementsByClass(className){\r\n                const elements = document.getElementsByClassName(className);\r\n                while(elements.length > 0){\r\n                    elements[0].parentNode.removeChild(elements[0]);\r\n                }\r\n            }\r\n            removeElementsByClass(\"canvas\");\r\n    \r\n            document.querySelector('.world-container').appendChild( renderer.domElement );\r\n            window.addEventListener(\"pointerdown\",onMouseDown,false);\r\n        }catch(e){\r\n            console.log(e)\r\n        }\r\n\r\n        return function cleanup () {\r\n            window.removeEventListener(\"pointerdown\",onMouseDown,false);\r\n        }\r\n    },[])\r\n\r\n    if(error){\r\n        console.log(error)\r\n        return <div>Error loading world</div>\r\n    }\r\n\r\n    if(loading || world==={}){\r\n        return <div>Loading</div>\r\n    }\r\n\r\n    const drawScene = () => {\r\n        const group = new THREE.Group();\r\n        for(let x = 0; x < 10; x++){\r\n            for(let y = 0; y < 10; y++){\r\n                var tile = new THREE.Shape();\r\n                tile.moveTo(x,y);\r\n                tile.lineTo(x,y+1);\r\n                tile.lineTo(x+1,y+1);\r\n                tile.lineTo(x+1,y);\r\n\r\n                const geometry = new THREE.ShapeGeometry(tile);\r\n                const material = new THREE.MeshBasicMaterial({\r\n                    color: `#aafa${Math.ceil((x+y)/2)}f`,\r\n                    side: THREE.FrontSide,\r\n                    depthWrite: true\r\n                });\r\n\r\n                const tileMesh = new THREE.Mesh(geometry,material);\r\n                tileMesh.name=\"floor\";\r\n                group.add(tileMesh);\r\n            }\r\n        }\r\n        scene.add(group)\r\n    }\r\n\r\n    const drawCharacter = () => {\r\n        var geometry = new THREE.SphereGeometry(.1, 50, 50, 0, Math.PI * 2, 0, Math.PI * 2);\r\n        var material = new THREE.MeshNormalMaterial();\r\n        var cube = new THREE.Mesh(geometry, material);\r\n        cube.translateZ(.1)\r\n        cube.position.x = 5;\r\n        cube.position.y=5;\r\n        scene.add(cube);\r\n    }\r\n\r\n    drawScene();\r\n    drawCharacter();\r\n\r\n    console.log(world)\r\n    let animate = () => {\r\n        requestAnimationFrame( animate );\r\n        //controls.update();\r\n        renderer.render( scene, camera );\r\n    };\r\n\r\n    animate();\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst World = ({setShowNavFooter}) => {\r\n    const { id } = useParams();\r\n    \r\n    useEffect(()=>{\r\n        setShowNavFooter(false);\r\n    },[]);\r\n\r\n    if(!Auth.loggedIn()) return <Redirect to=\"/login\" />\r\n    if(!id) return <Redirect to=\"/\"/>\r\n\r\n    return (\r\n        <div className=\"world-container\">\r\n            <RenderWorld id={id}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default World;","C:\\Users\\merpi\\OneDrive\\Desktop\\worldsProject\\worlds\\client\\src\\pages\\Users.js",["103"],"import React from 'react';\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst Users = () => {\r\n    const { id } = useParams();\r\n\r\n    if(!Auth.loggedIn()) return <Redirect to=\"/login\" />\r\n\r\n    console.log(id)\r\n    if( !id ) {\r\n        return (\r\n            <form>\r\n                <input className=\"form-input\" placeholder=\"Search for a user\">\r\n                </input>\r\n            </form>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":256,"column":13,"nodeType":"110","endLine":256,"endColumn":55},{"ruleId":"111","severity":1,"message":"112","line":271,"column":9,"nodeType":"113","messageId":"114","endLine":271,"endColumn":28},{"ruleId":"115","severity":1,"message":"116","line":12,"column":5,"nodeType":"117","endLine":12,"endColumn":7,"suggestions":"118"},{"ruleId":"115","severity":1,"message":"116","line":14,"column":5,"nodeType":"117","endLine":14,"endColumn":7,"suggestions":"119"},{"ruleId":"111","severity":1,"message":"120","line":3,"column":52,"nodeType":"113","messageId":"114","endLine":3,"endColumn":61},{"ruleId":"111","severity":1,"message":"121","line":33,"column":12,"nodeType":"113","messageId":"114","endLine":33,"endColumn":18},{"ruleId":"111","severity":1,"message":"122","line":92,"column":12,"nodeType":"113","messageId":"114","endLine":92,"endColumn":18},{"ruleId":"111","severity":1,"message":"123","line":92,"column":19,"nodeType":"113","messageId":"114","endLine":92,"endColumn":28},{"ruleId":"111","severity":1,"message":"124","line":10,"column":7,"nodeType":"113","messageId":"114","endLine":10,"endColumn":21},{"ruleId":"115","severity":1,"message":"125","line":154,"column":7,"nodeType":"117","endLine":154,"endColumn":9,"suggestions":"126"},{"ruleId":"115","severity":1,"message":"116","line":223,"column":7,"nodeType":"117","endLine":223,"endColumn":9,"suggestions":"127"},{"ruleId":"111","severity":1,"message":"128","line":3,"column":10,"nodeType":"113","messageId":"114","endLine":3,"endColumn":18},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-unused-vars","'renderCharacterInfo' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setShowNavFooter'. Either include it or remove the dependency array. If 'setShowNavFooter' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["131"],["132"],"'useParams' is defined but never used.","'logout' is assigned a value but never used.","'newMsg' is assigned a value but never used.","'setNewMsg' is assigned a value but never used.","'CameraControls' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'enterWorld', 'id', 'onMouseDown', and 'renderer.domElement'. Either include them or remove the dependency array.",["133"],["134"],"'useQuery' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},{"desc":"135","fix":"137"},{"desc":"138","fix":"139"},{"desc":"135","fix":"140"},"Update the dependencies array to be: [setShowNavFooter]",{"range":"141","text":"142"},{"range":"143","text":"142"},"Update the dependencies array to be: [enterWorld, id, onMouseDown, renderer.domElement]",{"range":"144","text":"145"},{"range":"146","text":"142"},[300,302],"[setShowNavFooter]",[465,467],[5331,5333],"[enterWorld, id, onMouseDown, renderer.domElement]",[7175,7177]]