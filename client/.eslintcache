[{"/Users/amp/Projects/Worlds/client/src/index.js":"1","/Users/amp/Projects/Worlds/client/src/reportWebVitals.js":"2","/Users/amp/Projects/Worlds/client/src/App.js":"3","/Users/amp/Projects/Worlds/client/src/Main.js":"4","/Users/amp/Projects/Worlds/client/src/pages/Signup.js":"5","/Users/amp/Projects/Worlds/client/src/pages/Users.js":"6","/Users/amp/Projects/Worlds/client/src/pages/Login.js":"7","/Users/amp/Projects/Worlds/client/src/pages/Home.js":"8","/Users/amp/Projects/Worlds/client/src/pages/Profile.js":"9","/Users/amp/Projects/Worlds/client/src/utils/mutations.js":"10","/Users/amp/Projects/Worlds/client/src/pages/World.js":"11","/Users/amp/Projects/Worlds/client/src/utils/auth.js":"12","/Users/amp/Projects/Worlds/client/src/utils/queries.js":"13","/Users/amp/Projects/Worlds/client/src/utils/subscriptions.js":"14","/Users/amp/Projects/Worlds/client/src/components/Header/index.js":"15","/Users/amp/Projects/Worlds/client/src/components/Messages/index.js":"16","/Users/amp/Projects/Worlds/client/src/components/Footer/index.js":"17","/Users/amp/Projects/Worlds/client/src/components/WorldList/index.js":"18","/Users/amp/Projects/Worlds/client/src/components/WorldList/CreateWorld.js":"19","/Users/amp/Projects/Worlds/client/src/components/WorldList/WorldCard.js":"20"},{"size":500,"mtime":1682112979100,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1682112979101,"results":"23","hashOfConfig":"22"},{"size":1702,"mtime":1682112979098,"results":"24","hashOfConfig":"22"},{"size":7840,"mtime":1682347506074,"results":"25","hashOfConfig":"22"},{"size":2765,"mtime":1682112979101,"results":"26","hashOfConfig":"22"},{"size":577,"mtime":1682112979101,"results":"27","hashOfConfig":"22"},{"size":3002,"mtime":1682262947331,"results":"28","hashOfConfig":"22"},{"size":1103,"mtime":1682112979100,"results":"29","hashOfConfig":"22"},{"size":10526,"mtime":1682370098082,"results":"30","hashOfConfig":"22"},{"size":2950,"mtime":1682369808191,"results":"31","hashOfConfig":"22"},{"size":8224,"mtime":1682112979101,"results":"32","hashOfConfig":"22"},{"size":1043,"mtime":1682112979102,"results":"33","hashOfConfig":"22"},{"size":1126,"mtime":1682112979102,"results":"34","hashOfConfig":"22"},{"size":1102,"mtime":1682347047010,"results":"35","hashOfConfig":"22"},{"size":1795,"mtime":1682262934555,"results":"36","hashOfConfig":"22"},{"size":11162,"mtime":1682112979099,"results":"37","hashOfConfig":"22"},{"size":847,"mtime":1682112979099,"results":"38","hashOfConfig":"22"},{"size":955,"mtime":1682112979100,"results":"39","hashOfConfig":"22"},{"size":3826,"mtime":1682259847769,"results":"40","hashOfConfig":"22"},{"size":2120,"mtime":1682264592282,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"su4sfu",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/amp/Projects/Worlds/client/src/index.js",[],["91","92"],"/Users/amp/Projects/Worlds/client/src/reportWebVitals.js",[],"/Users/amp/Projects/Worlds/client/src/App.js",[],"/Users/amp/Projects/Worlds/client/src/Main.js",["93","94","95","96"],"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useSubscription } from '@apollo/client';\nimport { BrowserRouter as Router, Route, Redirect, useParams } from 'react-router-dom';\nimport { Beforeunload } from 'react-beforeunload';\n\nimport Home from './pages/Home';\nimport Signup from './pages/Signup';\nimport Login from './pages/Login';\nimport Profile from './pages/Profile';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Messages from './components/Messages';\nimport World from './pages/World';\nimport Users from './pages/Users';\n\nimport Auth from './utils/auth';\n\nimport { QUERY_ME, QUERY_FRIENDS } from './utils/queries';\nimport { LOGOUT_USER, STATUS_UPDATE } from './utils/mutations';\nimport { \n  FRIEND_ADDED, \n  FRIEND_CANCELED, \n  FRIEND_UPDATED, \n  MESSAGE_SENT,\n  UPDATE_STATUS\n} from './utils/subscriptions';\n\nconst Main = () => {\n    const { loading, data, error } = useQuery(QUERY_ME);\n    const { loading: friendsLoading, data: friendsData} = useQuery(QUERY_FRIENDS);\n\n    const [logout] = useMutation(LOGOUT_USER)\n    const [statusUpdate] = useMutation(STATUS_UPDATE)\n\n    const { loading: newFriendDataLoading, data: newFriendData} = useSubscription(FRIEND_ADDED);\n    const { loading: friendUpdatedLoading, data: friendUpdatedData} = useSubscription(FRIEND_UPDATED);\n    const { loading: friendCanceledLoading, data: friendCanceledData} = useSubscription(FRIEND_CANCELED);\n    const { loading: messageLoading, data: messageData} = useSubscription(MESSAGE_SENT);\n    const { loading: statusLoading, data: statusData, error: statusError} = useSubscription(UPDATE_STATUS);\n\n    const [friends,setFriends]=useState([]);\n    const [worlds,setWorlds]=useState([]);\n    const [messageFromProfile,setMessageFromProfile]=useState({});\n    const [showNavFooter,setShowNavFooter]=useState(true);\n\n    useEffect(()=>{\n      Auth.loggedIn()\n      statusUpdate({\n        variables: {\n          status: \"online\",\n          type: \"connecting\"\n        }\n      })\n    },[])\n\n    useEffect(()=>{\n      console.log(statusLoading,statusData,statusError)\n      if(!statusLoading&&statusData){\n\n        const { _id, status, type } = statusData.updateStatus;\n\n        setFriends(friends=>{\n          const index = friends.findIndex(e=>e.receiving._id===_id||e.requesting._id===_id);\n          let friendToUpdate = {...friends[index]};\n          let receiving = {...friendToUpdate.receiving}\n          let requesting = {...friendToUpdate.requesting}\n          receiving._id === _id?\n            receiving.status=status:\n            requesting.status=status;\n          return [\n            ...friends.slice(0,index),\n            {...friendToUpdate,receiving,requesting},\n            ...friends.slice(index+1)\n            ]\n        });\n\n        console.log(\"howdy\")\n\n        if( type === \"connecting\"){\n          statusUpdate({\n            variables: {\n              status: \"online\",\n              type: \"responding\"\n            }\n          })\n        }\n      }\n    },[statusLoading,statusData,statusError])\n\n    useEffect(()=>{\n        if(!loading&&data)\n            setWorlds([...data.me.worlds]);\n    },[loading,data]);\n\n    useEffect(()=>{\n        if(!friendsLoading&&friendsData)\n            setFriends([...friendsData.friends]);\n    },[friendsLoading,friendsData]);\n\n    useEffect(()=>{\n        if(!messageLoading&&messageData){\n            setFriends(friends=>{\n                let index = friends.findIndex(e=>e._id===messageData.messageSent._id);\n                let updatedFriend = {...friends[index]};\n                let messageIndex = updatedFriend.messages.length;\n                for(let i = updatedFriend.messages.length-1; i>=0;i--){\n                  if(updatedFriend.messages[i].message === messageData.messageSent.message.message &&\n                    updatedFriend.messages[i].sender.username===messageData.messageSent.message.sender.username&&\n                    updatedFriend.messages[i].status===0){\n                      messageIndex = i;\n                    }\n                }\n                updatedFriend.messages= [\n                  ...updatedFriend.messages.slice(0,messageIndex),\n                  messageData.messageSent.message,\n                  ...updatedFriend.messages.slice(messageIndex+1)\n                ];\n                return [\n                ...friends.slice(0,index),\n                updatedFriend,\n                ...friends.slice(index+1)\n                ]\n            });\n        }\n    },[messageLoading,messageData]);\n\n    useEffect(()=>{\n        if(!newFriendDataLoading&&newFriendData){\n        setFriends(friends=>[...friends,newFriendData.friendAdded]);\n        } \n    },[newFriendData, newFriendDataLoading]);\n\n    useEffect(()=>{ \n        if(!friendUpdatedLoading&&friendUpdatedData){\n        setFriends(friends=>{\n            let {friendUpdated} = friendUpdatedData;\n            let index = friends.findIndex(friend=>\n            friend.requesting.username===friendUpdated.requesting.username&&\n            friend.receiving.username===friendUpdated.receiving.username\n            )\n            let updatedFriend = {...friends[index]};\n            updatedFriend.status = friendUpdated.status\n            return [\n            ...friends.slice(0,index),\n            updatedFriend,\n            ...friends.slice(index+1)\n            ]\n        });\n        }\n    },[friendUpdatedData, friendUpdatedLoading]);\n\n    useEffect(()=>{ \n        if(!friendCanceledLoading&&friendCanceledData){\n        setFriends(friends=>{\n            let {friendCanceled} = friendCanceledData;\n            let index = friends.findIndex(friend=>\n            friend.requesting.username===friendCanceled.requesting.username&&\n            friend.receiving.username===friendCanceled.receiving.username\n            )\n            return [\n            ...friends.slice(0,index),\n            ...friends.slice(index+1)\n            ]\n        });\n        }\n    },[friendCanceledData, friendCanceledLoading]);\n\n    const beforeUnload = () => {\n      //logout();\n    }\n\n    return(<Beforeunload onBeforeunload={beforeUnload}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          {showNavFooter?<Header />:[]}\n          <div className=\"container\">\n            <Route exact path=\"/\">\n              <Home \n                loading={loading}\n                data={data}\n                worlds={worlds}\n                setWorlds={setWorlds}\n                setShowNavFooter={setShowNavFooter}\n              />\n            </Route>\n            <Route exact path=\"/login\">\n              <Login setShowNavFooter={setShowNavFooter}/>\n            </Route>\n            <Route exact path=\"/signup\">\n              <Signup setShowNavFooter={setShowNavFooter}/>\n            </Route>\n            <Route exact path=\"/me\">\n              <Profile \n                loading={loading} \n                data={data} \n                error={error} \n                friends={friends} \n                friendsLoading={friendsLoading}\n                setFromProfile={setMessageFromProfile}\n                setShowNavFooter={setShowNavFooter}\n                />\n            </Route>\n            <Route exact path=\"/users/:id\">\n              <Users />\n            </Route>\n            <Route exact path=\"/users\">\n              <Users />\n            </Route>\n            <Route exact path=\"/world/:id\">\n              {<World setShowNavFooter={setShowNavFooter} me={data}/>}\n            </Route>\n            <Route exact path=\"/world\">\n              <Redirect to=\"/\"/>\n            </Route>\n          </div>\n          {Auth.loggedIn()?<Messages friends={friends} data={data} fromProfile={messageFromProfile} setFriends={setFriends}/>:[]}\n          {showNavFooter?<Footer />:[]}\n        </div>\n    </Router></Beforeunload>);\n}\n\nexport default Main;","/Users/amp/Projects/Worlds/client/src/pages/Signup.js",[],"/Users/amp/Projects/Worlds/client/src/pages/Users.js",["97"],"import React from 'react';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport Auth from '../utils/auth';\n\nconst Users = () => {\n    const { id } = useParams();\n\n    if(!Auth.loggedIn()) return <Redirect to=\"/login\" />\n\n    console.log(id)\n    if( !id ) {\n        return (\n            <form>\n                <input className=\"form-input\" placeholder=\"Search for a user\">\n                </input>\n            </form>\n        )\n    }\n    \n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default Users;","/Users/amp/Projects/Worlds/client/src/pages/Login.js",["98","99"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER, STATUS_UPDATE } from '../utils/mutations';\nimport \"./Login.css\";\n\nimport Auth from '../utils/auth';\n\nconst Login = ({setShowNavFooter}) => {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n  const [statusUpdate] = useMutation(STATUS_UPDATE);\n  \n  useEffect(()=>{\n    setShowNavFooter(true);\n  },[]);\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(\"Attempting to login\");\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n\n      \n      // const {data: statusData} = await statusUpdate({\n      //   variables: {\n      //     status: \"online\"\n      //   }\n      // });\n\n      // console.log(statusData)\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(error);\n    }\n\n    // clear form values\n    setFormState({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4 bg-dark login-form\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Login</h4>\n          <div className=\"card-body\">\n            {data ? (\n              <p>\n                Success! You may now head{' '}\n                <Link to=\"/\">back to the homepage.</Link>\n              </p>\n            ) : (\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Your email\"\n                  name=\"email\"\n                  type=\"email\"\n                  value={formState.email}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"******\"\n                  name=\"password\"\n                  type=\"password\"\n                  value={formState.password}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block confirm-btn\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n\n                <p className=\"text-light mb-0 mt-3\"> Don't have an account? <Link to=\"/Signup\">Signup</Link></p>\n              </form>\n            )}\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Login;\n","/Users/amp/Projects/Worlds/client/src/pages/Home.js",["100"],"// Node Modules\nimport React, { useEffect } from 'react';\n// Utilities\nimport Auth from '../utils/auth';\n// Components\nimport WorldList from '../components/WorldList';\nimport { Redirect } from 'react-router-dom';\n\nconst Home = ({worlds,setWorlds,loading,data,setShowNavFooter}) => {\n\n  useEffect(()=>{\n    setShowNavFooter(true);\n  },[])\n  const renderUserList = () => {\n    if (loading) {\n      return <h2>Loading...</h2>\n    } \n    else if(!data){\n      return;\n    }\n    else {\n      return <WorldList worlds={worlds} setWorlds={setWorlds} title=\"List of Worlds\" />\n    } \n  }\n\n  if(!Auth.loggedIn()) return <Redirect to=\"/login\" /> \n\n  const renderUsername = () => {\n    return Auth.getProfile().data.username;\n  }\n\n  return ( \n    <main>\n      <div className=\"flex-row justify-center\">\n        <div\n          className=\"col-12 col-md-10 mb-3 p-3\"\n          style={{ border: '1px dotted #1a1a1a' }}\n        >\n          {renderUsername()}\n        </div>\n        <div className=\"col-12 col-md-8 mb-3\">\n          {renderUserList()}\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Home;\n","/Users/amp/Projects/Worlds/client/src/pages/Profile.js",["101","102"],"/Users/amp/Projects/Worlds/client/src/utils/mutations.js",[],"/Users/amp/Projects/Worlds/client/src/pages/World.js",["103","104","105","106","107","108"],"import React, { useEffect, useState } from 'react';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { ENTER_WORLD } from '../utils/mutations';\nimport * as THREE from \"three\";\nimport Auth from '../utils/auth';\nimport \"./World.css\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Link } from 'react-router-dom';\n\nconst CameraControls = (camera, renderer,scene) => {\n    let controls = new OrbitControls( camera , renderer.domElement);\n    controls.enabled = true;\n    controls.enableDamping = true;   //damping \n    controls.dampingFactor = 0.15;   //damping inertia\n    controls.enableZoom = true;      //Zooming\n    controls.autoRotate = false;     //Enable auto rotation\n    controls.minDistance = (2+5);\n    controls.maxDistance = (2+5)+20;\n    controls.enablePan = false;\n    controls.keys = {\n        LEFT: null, //left arrow\n        UP: null, // up arrow\n        RIGHT: null, // right arrow\n        BOTTOM: null // down arrow\n    };\n    controls.addEventListener(\"change\", (e) => {\n        if (renderer) renderer.render(scene, camera);\n    });\n    return controls;\n}\n\nconst RenderWorld = ({id, me}) => {\n    \n    const [enterWorld, {data, loading, error}] = useMutation(ENTER_WORLD);\n    const [worldError,setWorldError] = useState(false);\n    const [errorMessage,setErrorMessage] = useState('');\n    // const [exitWorld, {data, loading, error}] = useMutation(EXIT_WORLD);\n    const world = data?.enterWorld || {};\n\n    // Set up the scene\n    let scene = new THREE.Scene();\n    let camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, .1, 1000 );\n    let renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    let raycaster = new THREE.Raycaster();\n    let mouse = new THREE.Vector2();\n\n    let xRotation = .5;\n\n    let character;\n\n    window.addEventListener(\"resize\", \n        () => {\n            let tanFOV = Math.tan( ( ( Math.PI / 180 ) * camera.fov / 2 ) );\n            let windowHeight = window.innerHeight;\n\n            camera.aspect = window.innerWidth / window.innerHeight;\n            \n            // adjust the FOV\n            camera.fov = ( 360 / Math.PI ) * Math.atan( tanFOV * ( window.innerHeight / windowHeight ) );\n            \n            camera.updateProjectionMatrix();\n            //camera.lookAt( scene.position );\n\n            renderer.setSize( window.innerWidth, window.innerHeight );\n            renderer.render( scene, camera );\n        }, false\n    );\n\n    window.addEventListener(\"keydown\",e=>{\n        switch(e.key){\n            case 'ArrowRight':\n                camera.translateZ(-5);\n                camera.rotateX(-xRotation)\n                camera.rotateZ(.1);\n                camera.rotateX(xRotation)\n                camera.translateZ(5);\n                break;\n            case 'ArrowLeft':\n                camera.translateZ(-5);\n                camera.rotateX(-xRotation)\n                camera.rotateZ(-.1);\n                camera.rotateX(xRotation)\n                camera.translateZ(5);\n                break;\n            case 'ArrowDown':\n                if(xRotation<1) xRotation+=.1\n                else break;\n                camera.translateZ(-5);\n                camera.rotateX(.1);\n                camera.translateZ(5);\n                break;\n            case 'ArrowUp':\n                if(xRotation>.2) xRotation-=.1\n                else break;\n                camera.translateZ(-5);\n                camera.rotateX(-.1);\n                camera.translateZ(5);\n                break;\n            default:\n        }\n    });\n\n    function onMouseDown(e) {\n        // update mouse position\n        mouse.x = (e.clientX / window.innerWidth) * 2 - 1;\n        mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n        \n        // Set the raycaster to check for intersected objects\n        raycaster.setFromCamera( mouse, camera );\n\n        const intersects = raycaster.intersectObjects( scene.children );\n\n        console.log(intersects);\n    }\n\n    const drawScene = () => {\n        const group = new THREE.Group();\n        for(let x = 0; x < 10; x++){\n            for(let y = 0; y < 10; y++){\n                var tile = new THREE.Shape();\n                tile.moveTo(x,y);\n                tile.lineTo(x,y+1);\n                tile.lineTo(x+1,y+1);\n                tile.lineTo(x+1,y);\n\n                const geometry = new THREE.ShapeGeometry(tile);\n                const material = new THREE.MeshBasicMaterial({\n                    color: `#aafa${Math.ceil((x+y)/2)}f`,\n                    side: THREE.FrontSide,\n                    depthWrite: true\n                });\n\n                const tileMesh = new THREE.Mesh(geometry,material);\n                tileMesh.name=\"floor\";\n                group.add(tileMesh);\n            }\n        }\n        scene.add(group)\n    }\n\n    const drawCharacter = () => {\n        var geometry = new THREE.SphereGeometry(.1, 50, 50, 0, Math.PI * 2, 0, Math.PI * 2);\n        var material = new THREE.MeshNormalMaterial();\n        character = new THREE.Mesh(geometry, material);\n        character.translateZ(.1)\n        character.position.x = 5;\n        character.position.y = 5;\n        scene.add(character);\n    }\n\n    useEffect(()=>{\n        function removeElementsByClass(className){\n            const elements = document.getElementsByClassName(className);\n            while(elements.length > 0){\n                elements[0].parentNode.removeChild(elements[0]);\n            }\n        }\n        removeElementsByClass(\"canvas\");\n        console.log(id)\n        try{\n            enterWorld({\n                variables: {id}\n            }).then(data=>{\n                renderer.setClearColor(new THREE.Color(\"black\"),1);\n                renderer.domElement.className = \"canvas\";\n                renderer.setSize( window.innerWidth, window.innerHeight);\n\n                camera.position.z = 5;\n                camera.position.y = 5;\n                camera.position.x = 5;\n                camera.lookAt(new THREE.Vector3(5,5,0))\n                \n                camera.translateZ(-5);\n                camera.rotateX(.5);\n                camera.translateZ(5);\n\n                renderer.render( scene, camera );\n\n                console.log(\"Entered World\");\n                console.log(data,me);\n\n                // data contains all scene objects for section\n                drawScene(data);\n\n                // check that me has position, if not assign default location (5,5) at main section\n                if(me.currentPosition){\n                    drawCharacter(me);\n                }\n                else {\n\n                }\n\n                document.querySelector('.world-container').appendChild( renderer.domElement );\n                window.addEventListener(\"pointerdown\",onMouseDown,false);\n\n            }).catch(err=>{\n                console.log(err);\n                setWorldError(true);\n                setErrorMessage(err.message);\n            });\n\n\n            \n    \n            \n        }catch(e){\n            console.log(e)\n        }\n\n        return function cleanup () {\n            window.removeEventListener(\"pointerdown\",onMouseDown,false);\n        }\n    },[])\n\n    let animate = () => {\n        requestAnimationFrame( animate );\n        //controls.update();\n        renderer.render( scene, camera );\n    };\n\n    animate();\n    return (\n        <div>\n            {\n                worldError?\n                <div className=\"error-div\">\n                    <div className=\"error-header\">\n                        Error Message\n                    </div>\n                    <div className=\"error-message\">\n                        {errorMessage}\n                        <Link to=\"/\"> Return home </Link>\n                    </div>\n                </div>:[]\n            }\n        </div>\n    )\n}\n\nconst World = ({setShowNavFooter, me}) => {\n    const { id } = useParams();\n    \n    useEffect(()=>{\n        setShowNavFooter(false);\n    },[]);\n\n    if(!Auth.loggedIn()) return <Redirect to=\"/login\" />\n    if(!id) return <Redirect to=\"/\"/>\n\n    return (\n        <div className=\"world-container\">\n            <RenderWorld id={id} me={me}/>\n        </div>\n    )\n}\n\nexport default World;","/Users/amp/Projects/Worlds/client/src/utils/auth.js",["109"],"import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    // If there is a token and it's not expired, return `true`\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();\n","/Users/amp/Projects/Worlds/client/src/utils/queries.js",[],"/Users/amp/Projects/Worlds/client/src/utils/subscriptions.js",[],"/Users/amp/Projects/Worlds/client/src/components/Header/index.js",["110"],"import { useMutation } from '@apollo/client';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Auth from '../../utils/auth';\nimport { STATUS_UPDATE } from '../../utils/mutations';\n\nconst Header = (props) => {\n  const [statusUpdate] = useMutation(STATUS_UPDATE);\n\n  const logout = async (event) => {\n    event.preventDefault();\n    // try {\n    //   const {data} = await statusUpdate({\n    //     variables: {\n    //       status: \"offline\"\n    //     }\n    //   });\n    //   console.log(data)\n    // } catch(e){\n    //   console.log(e);\n    // }\n    Auth.logout();\n  };\n\n  const renderControls = () => {\n    // If logged in show logout controls\n    if (Auth.loggedIn()) {\n      return (\n        <>\n          <Link className=\"btn btn-lg btn-info m-2\" to=\"/me\">\n            {Auth.getProfile().data.username}'s profile\n          </Link>\n          <button className=\"btn btn-lg btn-light m-2\" onClick={logout}>\n            Logout\n          </button>\n        </>\n      );\n    }\n    // If logged out show login controls\n    return (\n      <>\n        <Link className=\"btn btn-lg btn-info m-2\" to=\"/login\">\n          Login\n        </Link>\n        <Link className=\"btn btn-lg btn-light m-2\" to=\"/signup\">\n          Signup\n        </Link>\n      </>\n    )\n  };\n\n  return (\n    <header className=\"bg-dark text-light mb-4 py-3 flex-row align-center\">\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n        <div>\n          <Link className=\"text-light\" to=\"/\">\n            <h1 className=\"m-0\">Worlds</h1>\n          </Link>\n        </div>\n        <div>\n          <p className=\"m-0 text-center\">A place to create and join worlds</p>\n          {renderControls()}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","/Users/amp/Projects/Worlds/client/src/components/Messages/index.js",["111","112"],"import React, { useState, useEffect } from 'react';\n\nimport { SEND_MESSAGE } from '../../utils/mutations';\nimport { useMutation } from '@apollo/client';\n\nimport './index.css'\n\nconst MessagesButton = ({setShowMessages}) => {\n    return(\n        <div className=\"message-button circle\" onClick={()=>setShowMessages(true)}>\n            💬\n        </div>\n    )\n}\n\nconst FriendsWithMessage = ({setShowMessages,setShowFriends,friends,data,setFriend,setId}) => {\n    const [input,setInput] = useState('')\n    const friendsWithMessages = friends.filter(friend=>friend.messages.length);\n    //console.log(friendsWithMessages)\n    const inputChange = (e) => {\n        setInput(e.target.value);\n    }\n    \n    const handleFriendClick = ({friend,id}) => {\n        setFriend(friend);\n        setId(id);\n        setShowFriends(false);\n    }\n\n    const convertTime = epoch => {\n        let d = new Date(parseInt(epoch)).toLocaleString().replace(',','').split(' ');\n        let today = new Date().toLocaleString().replace(',','').split(' ');;\n        if(d[0]===today[0]){\n            let [hour,minute] = d[1].split(\":\");\n            return `${hour}:${minute} ${d[2]}`\n        }\n        return d[0]\n    }\n\n    return (\n        <div>\n            <div className=\"message-header p-3\">\n                <div className=\"new-message circle-mid\" onClick={()=>setShowFriends(false)}>✉</div>\n                <h3>Messages</h3>\n                <div className=\"message-close alt-circle\" onClick={()=>setShowMessages(false)}>✖</div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <form className=\"message-search\">\n                        <input className=\"form-input\" onChange={e=>inputChange(e)} value={input} placeholder=\"Search\"></input>\n                    </form>\n                </div>\n            </div>\n            <div className=\"row friends-with-messages\">\n                {friendsWithMessages.length?\n                    friendsWithMessages\n                        .filter(friend=>{\n                            return (friend.receiving.username.includes(input)&&friend.receiving.username!==data.me.username)||\n                            (friend.requesting.username.includes(input)&&friend.requesting.username!==data.me.username)}\n                        )\n                        .map(f=>({\n                            username: f.receiving.username===data.me.username?f.requesting.username:f.receiving.username,\n                            status:f.receiving.username===data.me.username?f.requesting.status:f.receiving.status,\n                            id: f._id,\n                            messages: f.messages,\n                            lastSent: f.messages[f.messages.length-1].createdAt\n                        }))\n                        .sort((a,b)=>b.lastSent-a.lastSent)\n                        .map(f=><div key={f.id} className=\"col-12\">\n                            <div className=\"message-friend\" onClick={()=>{handleFriendClick({friend:f.username,id:f.id})}}>\n                                <h6><div className={`status-circle ${f.status===\"online\"?\"online\":\"offline\"}`}></div>{f.username}</h6>\n                                <p className=\"mb-0 last-message\">{f.messages[f.messages.length-1].message}</p>\n                                <div className=\"last-message-time\">{convertTime(f.messages[f.messages.length-1].createdAt)}\n                                    \n                                </div>\n                            </div>\n                        </div>):\n                    <div className=\"no-messages\">No messages</div>}\n            </div>\n        </div>\n    )\n}\n\nconst MessagesWithFriend = ({setShowMessages,setShowFriends,friend,setFriend,friends,data,_id,fromProfile,setFriends}) => {\n    const [sendMessage] = useMutation(SEND_MESSAGE)\n    const [title,setTitle] = useState(friend.length?friend:'New Message');\n    const [search,setSearch] = useState('');\n    const [message,setMessage] = useState('');\n    const [showSearch,setShowSearch] = useState(friend.length?false:true);\n    const [friendId,setFriendId] = useState(_id?_id:'');\n    const [errorMsg,setErrorMsg] = useState('')\n    const [newMsg,setNewMsg]=useState(null);\n\n    useEffect(()=>{\n        if(fromProfile.show){\n            setTitle(fromProfile.friend);\n            setFriendId(fromProfile.id);\n        }\n    },[fromProfile])\n\n    const [filteredFriend] = friends.filter(f=>{\n        return f.requesting.username===title||f.receiving.username===title\n    })\n\n    let messages = title==='New Message'?[]:[...filteredFriend?.messages||[]].reverse();\n    if(title!=='New Message'&&!filteredFriend) {\n        return <>{setShowFriends(true)}</>;\n    }\n\n    const handleFriendClick = ({id,username}) => {\n        setTitle(username);\n        setFriendId(id);\n        setShowSearch(false);\n    }\n\n    const handleSendMessage = async (e) => {\n        e.preventDefault();\n        if(!message.length) return;\n        let index = friends.findIndex(f=>f._id===friendId);\n        let updatedFriend = {...friends[index]}\n        updatedFriend.messages = [\n            ...updatedFriend.messages,\n            {\n                message,\n                sender: {\n                    username: data.me.username\n                },\n                status: 0,\n                _id: updatedFriend.messages.length\n            }\n        ];\n        setFriends([\n            ...friends.slice(0,index),\n            updatedFriend,\n            ...friends.slice(index+1)\n        ]);\n        try {\n            await sendMessage({\n                variables: {id: friendId,message}\n            });\n            setMessage('');\n        } catch(e){\n            console.log(e.message)\n            setErrorMsg(e.message);\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"message-header p-3\">\n                <div className=\"new-message circle-mid\" onClick={()=>{setShowFriends(true);setFriend('');}}>←</div>\n                <h3 className=\"ml-3\">{title}</h3>\n                <div className=\"message-close alt-circle\" onClick={()=>setShowMessages(false)}>✖</div>\n            </div>\n            {showSearch?<div className=\"row\">\n                <div className=\"col-12\">\n                    <form className=\"message-search\" onSubmit={e=>e.preventDefault()}>\n                        <input className=\"form-input\" onChange={e=>setSearch(e.target.value)} value={search} placeholder=\"Search friends\"></input>\n                    </form>\n                </div>\n            </div>:[]}\n            {showSearch?\n            <div className=\"row search-friends-container\">\n                {\n                    friends\n                        .filter(f=>{\n                            return ((f.receiving.username.includes(search)&&f.receiving.username!==data.me.username)||\n                            (f.requesting.username.includes(search)&&f.requesting.username!==data.me.username))&&f.status===1}\n                        )\n                        .map(f=>({\n                            username: f.receiving.username===data.me.username?f.requesting.username:f.receiving.username,\n                            id: f._id\n                        }))\n                        .map(f=>\n                            <div key={f.id} className=\"col-12\">\n                                <div className=\"search-friend\" onClick={()=>handleFriendClick(f)}>\n                                    {f.username}\n                                </div>\n                            </div>\n                        )\n                }\n            </div>:\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"messages p-2\">\n                        {\n                            messages.map(m=>m.sender.username===title?\n                                <div key={m._id} className=\"row mb-1\">\n                                    <div className=\"col-8\">\n                                        <div className=\"from-friend\">{m.message}</div><div></div>\n                                    </div>\n                                    <div className=\"col-4\">\n                                    </div>\n                                </div>:\n                                <div key={m._id} className=\"row mb-1\">\n                                    <div className=\"col-4\">\n                                    </div>\n                                    <div className=\"col-8\">\n                                        <div className={`from-me status-${m.status}`}>{m.message}</div>\n                                    </div>\n                                </div>\n                            )\n                        }\n                        {errorMsg?errorMsg:\"\"}\n                    </div>\n                </div>\n            </div>}\n            {showSearch?[]:\n                <form onSubmit={handleSendMessage}>\n                    <div className=\"row send-message px-2\">\n                        <div className=\"col-10 pr-0\">\n                            <input className=\"form-input send-message-input\" placeholder=\"message\" value={message} onChange={e=>setMessage(e.target.value)}>\n                            </input>\n                        </div>\n                        <div className=\"col-2 pl-0 py-2\">\n                            <div className=\"message-sent-btn\" onClick={handleSendMessage}>\n                                Send\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            }\n        </div>\n    )\n}\n\nconst Messages = ({friends,data,fromProfile,setFriends}) => {\n    const [showMessages,setShowMessages] = useState(false);\n    const [showFriends,setShowFriends] = useState(true);\n    const [friend,setFriend] = useState('');\n    const [id,setId] = useState('');\n\n    useEffect(()=>{\n        if(fromProfile.show){\n            setShowMessages(fromProfile.show)\n            setShowFriends(fromProfile.showFriend)\n            setFriend(fromProfile.friend)\n            setId(fromProfile.id)\n        }\n    },[fromProfile])\n\n    return (\n        showMessages?\n            <div className=\"message-container\">\n                {(showFriends)?\n                    <FriendsWithMessage\n                        setShowMessages={setShowMessages}\n                        setShowFriends={setShowFriends}\n                        friends={friends}\n                        data={data}\n                        setFriend={setFriend}\n                        setId={setId}\n                    />:\n                    <MessagesWithFriend\n                        setShowMessages={setShowMessages}\n                        setShowFriends={setShowFriends} \n                        friend={friend} \n                        setFriend={setFriend}\n                        setId={setId}\n                        friends={friends}\n                        data={data}\n                        _id={id}\n                        fromProfile={fromProfile}\n                        setFriends={setFriends}\n                    />}\n            </div>:\n            <MessagesButton setShowMessages={setShowMessages}/>\n    )\n}\n\nexport default Messages;","/Users/amp/Projects/Worlds/client/src/components/Footer/index.js",[],"/Users/amp/Projects/Worlds/client/src/components/WorldList/index.js",[],"/Users/amp/Projects/Worlds/client/src/components/WorldList/CreateWorld.js",[],"/Users/amp/Projects/Worlds/client/src/components/WorldList/WorldCard.js",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":3,"column":52,"nodeType":"119","messageId":"120","endLine":3,"endColumn":61},{"ruleId":"117","severity":1,"message":"121","line":32,"column":12,"nodeType":"119","messageId":"120","endLine":32,"endColumn":18},{"ruleId":"122","severity":1,"message":"123","line":54,"column":7,"nodeType":"124","endLine":54,"endColumn":9,"suggestions":"125"},{"ruleId":"122","severity":1,"message":"123","line":88,"column":7,"nodeType":"124","endLine":88,"endColumn":45,"suggestions":"126"},{"ruleId":"117","severity":1,"message":"127","line":3,"column":10,"nodeType":"119","messageId":"120","endLine":3,"endColumn":18},{"ruleId":"117","severity":1,"message":"128","line":12,"column":10,"nodeType":"119","messageId":"120","endLine":12,"endColumn":22},{"ruleId":"122","severity":1,"message":"129","line":16,"column":5,"nodeType":"124","endLine":16,"endColumn":7,"suggestions":"130"},{"ruleId":"122","severity":1,"message":"129","line":13,"column":5,"nodeType":"124","endLine":13,"endColumn":7,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":271,"column":13,"nodeType":"134","endLine":271,"endColumn":55},{"ruleId":"117","severity":1,"message":"135","line":294,"column":9,"nodeType":"119","messageId":"120","endLine":294,"endColumn":28},{"ruleId":"117","severity":1,"message":"136","line":11,"column":7,"nodeType":"119","messageId":"120","endLine":11,"endColumn":21},{"ruleId":"117","severity":1,"message":"137","line":35,"column":31,"nodeType":"119","messageId":"120","endLine":35,"endColumn":38},{"ruleId":"117","severity":1,"message":"138","line":35,"column":40,"nodeType":"119","messageId":"120","endLine":35,"endColumn":45},{"ruleId":"117","severity":1,"message":"139","line":39,"column":11,"nodeType":"119","messageId":"120","endLine":39,"endColumn":16},{"ruleId":"122","severity":1,"message":"140","line":214,"column":7,"nodeType":"124","endLine":214,"endColumn":9,"suggestions":"141"},{"ruleId":"122","severity":1,"message":"129","line":246,"column":7,"nodeType":"124","endLine":246,"endColumn":9,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":41,"column":1,"nodeType":"145","endLine":41,"endColumn":34},{"ruleId":"117","severity":1,"message":"128","line":9,"column":10,"nodeType":"119","messageId":"120","endLine":9,"endColumn":22},{"ruleId":"117","severity":1,"message":"146","line":92,"column":12,"nodeType":"119","messageId":"120","endLine":92,"endColumn":18},{"ruleId":"117","severity":1,"message":"147","line":92,"column":19,"nodeType":"119","messageId":"120","endLine":92,"endColumn":28},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'logout' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'statusUpdate'. Either include it or remove the dependency array.","ArrayExpression",["150"],["151"],"'useQuery' is defined but never used.","'statusUpdate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setShowNavFooter'. Either include it or remove the dependency array. If 'setShowNavFooter' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["152"],["153"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'renderCharacterInfo' is assigned a value but never used.","'CameraControls' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'world' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'camera', 'drawCharacter', 'drawScene', 'enterWorld', 'id', 'me', 'onMouseDown', 'renderer', and 'scene'. Either include them or remove the dependency array.",["154"],["155"],"import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","'newMsg' is assigned a value but never used.","'setNewMsg' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"160","fix":"162"},{"desc":"163","fix":"164"},{"desc":"160","fix":"165"},"Update the dependencies array to be: [statusUpdate]",{"range":"166","text":"167"},"Update the dependencies array to be: [statusLoading, statusData, statusError, statusUpdate]",{"range":"168","text":"169"},"Update the dependencies array to be: [setShowNavFooter]",{"range":"170","text":"171"},{"range":"172","text":"171"},"Update the dependencies array to be: [camera, drawCharacter, drawScene, enterWorld, id, me, onMouseDown, renderer, scene]",{"range":"173","text":"174"},{"range":"175","text":"171"},[2046,2048],"[statusUpdate]",[3036,3074],"[statusLoading, statusData, statusError, statusUpdate]",[542,544],"[setShowNavFooter]",[334,336],[7203,7205],"[camera, drawCharacter, drawScene, enterWorld, id, me, onMouseDown, renderer, scene]",[7979,7981]]